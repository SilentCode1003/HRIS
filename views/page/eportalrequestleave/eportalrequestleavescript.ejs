<script>
  let base64String = "";
  let leavesettingsid = "";
  let employeeid = "<%= employeeid %>";
  let totalLeaveGlobal = 0;
  let unusedLeaveGlobal = "";
  let totalusedGlobal = 0;
  let masterleaveid = "";
  $(document).ready(function () {
    console.log("Initialize");
    LoadTable();
    LoadList();
    LoadListHeader();
    LoadLeaveTypes();
    LoadListEmp();

    function LoadTable() {
      $("#dataTableapplyleave").DataTable({
        destroy: true,
        processing: true,
        serverSide: true,
        paging: false,
        searching: false,
        info: false,
        scrollY: 600,
        scrollCollapse: true,
        type: "GET",
        ajax: {
          url: "/eportalrequestleave/loadpending",
          dataSrc: (json) => {
            var finalData = [];
            var data = json.data;
            console.log(data);
            $.each(data, (key, item) => {
              var action = "";
              var status = item.status;

              action = `
                      <button id="editBtn" class="btn text-primary" name="editBtn" data-bs-toggle="modal" data-bs-target="#allleavemodal"><i class="fas fa-fw fa-pen"></i></button>
                    `;

              finalData.push({
                leaveid: item.leaveid,
                leavestartdate: item.leavestartdate,
                leaveenddate: item.leaveenddate,
                leavetype: item.leavetype,
                reason: item.reason,
                applieddate: item.applieddate,
                action: action,
              });
            });

            console.log(finalData);

            return finalData;
          },
        },
        columnDefs: [
          {
            targets: 1,
            className: "td-indent",
          },
        ],
        columns: [
          { data: "leaveid" },
          { data: "leavestartdate" },
          { data: "leaveenddate" },
          { data: "leavetype" },
          { data: "reason" },
          { data: "applieddate" },
          { data: "action" },
        ],
        initComplete: function () {
          console.log("Done");
        },
      });
    }

    function LoadListEmp() {
      $.ajax({
        type: "GET",
        url: "/teamleadusers/subgroupload",
        success: function (result) {
          var data = result.data;

          $.each(data, function (key, item) {
            var options = new Option(item.subgroupid, item.subgroupid);
            $(options).html(item.subgroupname);
            $("#leavesubgroup").append(options);
          });
        },
        error: function (result) {
          alert("error: " + result.data);
        },
      });
    }

    $(document).on("click", "#approvedtable", function () {
      console.log("Hit");
      $("#dataTableleaveApproved").find("tr:gt(0)").remove();

      $.ajax({
        type: "GET",
        url: "/eportalrequestleave/loadapproved",
        success: function (json) {
          var finalData = [];
          var data = json.data;
          console.log(finalData);

          var material_list_tbl = document.getElementById(
            "dataTableleaveApproved"
          );

          $.each(data, function (key, item) {
            var row = material_list_tbl.insertRow(1);
            var LEAVE_ID = row.insertCell(0);
            var LEAVE_TYPEID = row.insertCell(1);
            var LEAVE_STARTDATE = row.insertCell(2);
            var LEAVE_ENDDATE = row.insertCell(3);
            var LEAVE_TYPE = row.insertCell(4);
            var REASON = row.insertCell(5);
            var APPLIEDDATE = row.insertCell(6);
            var ACTION = row.insertCell(7);

            LEAVE_ID.innerHTML = item.leaveid;
            LEAVE_TYPEID.innerHTML = item.leavetypeid;
            LEAVE_STARTDATE.innerHTML = item.leavestartdate;
            LEAVE_ENDDATE.innerHTML = item.leaveenddate;
            LEAVE_TYPE.innerHTML = item.leavetype;
            REASON.innerHTML = item.leavereason;
            APPLIEDDATE.innerHTML = item.leaveapplieddate;
            ACTION.innerHTML =
              '<button id="viewBtn" class="btn text-primary view-btn" data-bs-toggle="modal" data-bs-target="#viewleave"><i class="fas fa-fw fa-eye"></i></button>';

            // Apply styles
            $.each(
              [
                LEAVE_ID,
                LEAVE_TYPEID,
                LEAVE_STARTDATE,
                LEAVE_ENDDATE,
                LEAVE_TYPE,
                REASON,
                APPLIEDDATE,
                ACTION,
              ],
              function (_, cell) {
                cell.style.textAlign = "center";
                cell.style.verticalAlign = "middle";
              }
            );
          });

          // Event delegation for row click
          $("#dataTableleaveApproved").on("click", "tr", function () {
            var dataRow = [];
            $(this)
              .find("td")
              .each(function () {
                dataRow.push($(this).text());
              });
            masterleaveid = dataRow[1];
            console.log("Selected Leave ID:", masterleaveid);
          });
        },
        error: function (xhr, status, error) {
          console.error("Error fetching approved leaves:", status, error);
        },
      });
    });

    $(document).on("click", "#viewBtn", function () {
      $("#dataTableLeaves").find("tr:gt(0)").remove();
      console.log(masterleaveid, "leaveid");

      $.ajax({
        type: "POST",
        url: "eportalrequestleave/getleavedates",
        data: {
          masterleaveid: masterleaveid,
        },
        success: function (json) {
          var finalData = [];
          var data = json.data;
          console.log(data, "data");
          material_list_tbl = document.getElementById("dataTableLeaves");

          // const TittleContainer = $("#TittleContainer");
          // TittleContainer.empty();

          // const firstItem = data;
          // const cardHtml = `<h3 class="modal-title" id="">${firstItem.fullname}'s ${firstItem.leavetype}</h3>`;
          // TittleContainer.append(cardHtml);

          $.each(data, function (key, item) {
            var row = material_list_tbl.insertRow(1);
            var FULLNAME = row.insertCell(0);
            var LEAVEDATES = row.insertCell(1);
            var LEAVE_DAY = row.insertCell(2);
            var LEAVE_TYPE = row.insertCell(3);
            var LEAVE_YEAR = row.insertCell(4);
            var LEAVE_PAYROLLDATE = row.insertCell(5);

            FULLNAME.innerHTML = item.fullname;
            LEAVEDATES.innerHTML = item.leavedates;
            LEAVE_DAY.innerHTML = item.day_name;
            LEAVE_TYPE.innerHTML = item.leavetype;
            LEAVE_YEAR.innerHTML = item.year;
            LEAVE_PAYROLLDATE.innerHTML = item.payrolldate;

            $.each(
              [
                FULLNAME,
                LEAVEDATES,
                LEAVE_DAY,
                LEAVE_TYPE,
                LEAVE_YEAR,
                LEAVE_PAYROLLDATE,
              ],
              function (_, cell) {
                cell.style.textAlign = "center";
                cell.style.verticalAlign = "middle";
              }
            );
          });
        },
        error: function (xhr, status, error) {
          // Handle errors here
        },
      });
    });

    $(document).on("click", "#rejectedtable", function () {
      console.log("Hit");
      $("#dataTableleaveRejected").find("tr:gt(0)").remove();

      $.ajax({
        type: "GET",
        url: "/eportalrequestleave/loadrejected",
        success: function (json) {
          var finalData = [];
          var data = json.data;
          console.log(finalData);

          material_list_tbl = document.getElementById("dataTableleaveRejected");

          $.each(data, function (key, item) {
            var row = material_list_tbl.insertRow(1);
            var LEAVE_ID = row.insertCell(0);
            var LEAVE_STARTDADTE = row.insertCell(1);
            var LEAVE_ENDATE = row.insertCell(2);
            var LEAVE_TYPE = row.insertCell(3);
            var REASON = row.insertCell(4);
            var APPLIEDDATE = row.insertCell(5);

            LEAVE_ID.innerHTML = item.leaveid;
            LEAVE_STARTDADTE.innerHTML = item.leavestartdate;
            LEAVE_ENDATE.innerHTML = item.leaveenddate;
            LEAVE_TYPE.innerHTML = item.leavetype;
            REASON.innerHTML = item.reason;
            APPLIEDDATE.innerHTML = item.applieddate;

            $.each(
              [
                LEAVE_ID,
                LEAVE_STARTDADTE,
                LEAVE_ENDATE,
                LEAVE_TYPE,
                REASON,
                APPLIEDDATE,
              ],
              function (_, cell) {
                cell.style.textAlign = "center";
                cell.style.verticalAlign = "middle";
              }
            );
          });
        },
        error: function (xhr, status, error) {},
      });
    });

    $(document).on("click", "#cancelledtable", function () {
      console.log("Hit");
      $("#dataTableleaveCancelled").find("tr:gt(0)").remove();

      $.ajax({
        type: "GET",
        url: "/eportalrequestleave/loadcancelled",
        success: function (json) {
          var finalData = [];
          var data = json.data;
          console.log(finalData);

          material_list_tbl = document.getElementById(
            "dataTableleaveCancelled"
          );

          $.each(data, function (key, item) {
            var row = material_list_tbl.insertRow(1);
            var LEAVE_ID = row.insertCell(0);
            var LEAVE_STARTDADTE = row.insertCell(1);
            var LEAVE_ENDATE = row.insertCell(2);
            var LEAVE_TYPE = row.insertCell(3);
            var REASON = row.insertCell(4);
            var APPLIEDDATE = row.insertCell(5);

            LEAVE_ID.innerHTML = item.leaveid;
            LEAVE_STARTDADTE.innerHTML = item.leavestartdate;
            LEAVE_ENDATE.innerHTML = item.leaveenddate;
            LEAVE_TYPE.innerHTML = item.leavetype;
            REASON.innerHTML = item.reason;
            APPLIEDDATE.innerHTML = item.applieddate;

            $.each(
              [
                LEAVE_ID,
                LEAVE_STARTDADTE,
                LEAVE_ENDATE,
                LEAVE_TYPE,
                REASON,
                APPLIEDDATE,
              ],
              function (_, cell) {
                cell.style.textAlign = "center";
                cell.style.verticalAlign = "middle";
              }
            );
          });
        },
        error: function (xhr, status, error) {},
      });
    });

    function LoadListHeader(leavesettingsid) {
      $.ajax({
        type: "POST",
        url: "eportalrequestleave/loadheader",
        data: {
          leavesettingsid: leavesettingsid,
          employeeid: employeeid,
        },
        success: function (result) {
          if (result.msg === "success") {
            const existingData = result.data;
            $.each(existingData, (key, item) => {
              $("#leaveperyearheader").text(item.totalleave);
              $("#Unusedleaveheader").text(item.unused);
              $("#UsedleaveHeader").text(item.used);
              totalLeaveGlobal = parseFloat(item.totalleave);
              unusedLeaveGlobal = parseFloat(item.unused);
              totalusedGlobal = parseFloat(item.used);
            });
          } else {
            swal("Error fetching employee data", msg, "error");
          }
        },
        error: function (err) {
          swal("An Error Occurred", msg, "error");
        },
      });
    }

    function LoadLeaveTypes() {
      $.ajax({
        type: "GET",
        url: "/eportalrequestleave/loadleavetype",
        success: function (result) {
          var data = result.data;

          $.each(data, function (key, item) {
            var options = new Option(item.leavetype, item.leavesettingsid);
            $(options).html(item.leavetype);
            $("#leavetypeheader").append(options);
          });
        },
        error: function (result) {
          alert("Error: " + result.data);
        },
      });
    }

    $("#leavetypeheader").change(function () {
      var selectedLeavesettingsid = $(this).val();
      LoadListHeader(selectedLeavesettingsid);
    });

    function LoadList() {
      $.ajax({
        type: "GET",
        url: "/eportalrequestleave/loadleavetype",
        success: function (result) {
          var data = result.data;

          //$("#leavetype").empty();

          $.each(data, function (key, item) {
            var options = new Option(
              item.leavesettingsid,
              item.leavesettingsid
            );
            $(options).html(item.leavetype);
            $("#leavetype").append(options);
          });
          if (data.length > 0) {
            var initialUnusedLeave = data[0].unusedleave;
            $("#unusedleave").val(initialUnusedLeave);
          }
        },
        error: function (result) {
          alert("Error: " + result.data);
        },
      });
      $("#leavetype").change(function () {
        var selectedLeaveType = $(this).val();
        updateUnusedLeave(selectedLeaveType);
      });

      $("#loadListBtn").click(function () {
        LoadList();
      });
    }

    function updateUnusedLeave(selectedLeaveType) {
      $.ajax({
        type: "POST",
        url: "/eportalrequestleave/getunusedleave",
        data: { leavetype: selectedLeaveType },
        success: function (result) {
          var data = result.data;
          if (Array.isArray(data) && data.length > 0) {
            unusedLeaveGlobal = data[0].unusedleave;
            $("#unusedleave").val(unusedLeaveGlobal);

            if (unusedLeaveGlobal !== "") {
              console.log("Unused leave value:", unusedLeaveGlobal);
            } else {
              console.log("Unused leave value is not set.");
            }
          } else {
            console.error("Error: No data or incorrect data format.");
            alert("Error fetching total unused leave. Please try again.");
          }
        },
        error: function (xhr, status, error) {
          console.error("Error fetching total unused leave:", error);
          alert("Error fetching total unused leave. Please try again.");
        },
      });
    }

    console.log("unused", unusedLeaveGlobal);

    $("#loadListBtn").click(function () {
      LoadList();
    });

    $(document).on("click", "#pendingleavesavebtn", function () {
      let startdate = $("#startldate").val();
      let enddate = $("#endldate").val();
      let leavetype = $("#leavetype").val();
      let reason = $("#leavereason").val();
      let durationDays = $("#durationdays").val();
      let paidDays = $("#paiddays").val();
      let unpaidDays = $("#unpaiddays").val();
      let image = base64String;
      let subgroup = $("#leavesubgroup").val();

      var message = "";

      if (startdate == "") {
        message += "Start Date is required ";
      }

      if (subgroup == "") {
        message += "Subgroup is required ";
      }

      if (enddate == "") {
        message += "End Date is required ";
      }

      if (leavetype === "" || leavetype === null) {
        message += "Leave Type is required ";
      }

      if (durationDays == "") {
        message += "Duration Days is required ";
      }

      if (reason == "") {
        message += "Reason is required ";
      }

      if (paidDays == "") {
        message += "Paid Days is required ";
      } else if (paidDays <= 0) {
        message += "Paid Days must be greater than 0 ";
      }

      if (image == "") {
        message += "Image is required ";
      }

      if (message !== "") {
        swal("Validation Error", message, "error");
      } else {
        console.log("Sending AJAX request with data:", {
          employeeid: employeeid,
          startdate: startdate,
          enddate: enddate,
          leavetype: leavetype,
          reason: reason,
          durationDays: durationDays,
          paidDays: paidDays,
          unpaidDays: unpaidDays,
          image: image,
          subgroup: subgroup,
        });

        $.ajax({
          type: "POST",
          url: "/eportalrequestleave/submit",
          data: {
            employeeid: employeeid,
            startdate: startdate,
            enddate: enddate,
            leavetype: leavetype,
            reason: reason,
            durationDays: durationDays,
            paidDays: paidDays,
            unpaidDays: unpaidDays,
            image: image,
            subgroup: subgroup,
          },
          success: function (result) {
            console.log("Received response:", result);
            if (result.msg === "success") {
              swal(
                "Update Successfully",
                "You clicked the button!",
                "success"
              ).then(() => {
                window.location.reload();
              });
              LoadTable();
            } else if (result.msg === "exist") {
              swal("Exist", "Data already exists!", "warning");
            } else if (result.msg === "not allowed") {
              swal("Warning", "Need 3 days before the start date", "warning");
            } else if (result.msg === "Invalid employee ID") {
              swal("Error", "Invalid employee ID", "error");
            } else if (result.msg === "dates_conflict") {
              const conflictingDates = result.existingDates
                .map((date) => {
                  const jsDate = new Date(date.ld_leavedates);
                  return jsDate.toISOString().split("T")[0];
                })
                .join(", ");
              swal(
                "Conflict",
                `The following dates already exist: ${conflictingDates}`,
                "warning"
              );
            } else {
              swal("Error", "An unexpected error occurred.", "error");
            }
          },
          error: function (err) {
            console.error("AJAX error:", err);
            swal("Error", "An error occurred while saving data.", "error");
          },
        });
      }
    });

    function calculateUnpaidDays(durationDays) {
      let unusedDays = parseFloat(unusedLeaveGlobal);
      let unpaidDays = durationDays - unusedDays;
      return unpaidDays < 0 ? 0 : unpaidDays;
    }

    function getRestDays(employeeid) {
      return $.ajax({
        type: "POST",
        url: "eportalrequestleave/getrestdays",
        data: { employeeid: employeeid },
        dataType: "json",
      });
    }

    function calculateDurationExcludingRestDays(startDate, endDate, restDays) {
      let start = new Date(startDate);
      let end = new Date(endDate);
      let duration = 0;
      while (start <= end) {
        let dayOfWeek = start.toLocaleString("en-US", { weekday: "long" });
        if (!restDays.includes(dayOfWeek)) {
          duration++;
        }
        start.setDate(start.getDate() + 1);
      }

      return duration;
    }
    $("#startldate, #endldate").change(function () {
      let startDate = $("#startldate").val();
      let endDate = $("#endldate").val();

      getRestDays(employeeid)
        .done(function (response) {
          if (response.data && response.data.restdays) {
            let restDays = response.data.restdays.trim().split(" ");
            let durationDays = calculateDurationExcludingRestDays(
              startDate,
              endDate,
              restDays
            );
            let unpaidDays = calculateUnpaidDays(durationDays);
            let paidDays = Math.min(durationDays, unusedLeaveGlobal);

            $("#durationdays").val(durationDays);
            $("#paiddays").val(paidDays);
            $("#unpaiddays").val(unpaidDays);
          } else {
            console.error("Failed to retrieve rest days.");
            alert("Error fetching rest days. Please try again.");
          }
        })
        .fail(function (xhr, status, error) {
          console.error("Error fetching rest days:", error);
          alert("Error fetching rest days. Please try again.");
        });
    });

    // $("#startldate, #endldate").change(function () {
    //   let startLDate = new Date($("#startldate").val());
    //   let endLDate = new Date($("#endldate").val());

    //   let durationDays =
    //     Math.floor((endLDate - startLDate) / (1000 * 60 * 60 * 24)) + 1;

    //   let unpaidDays = calculateUnpaidDays(durationDays);
    //   let paidDays =
    //     durationDays < unusedLeaveGlobal ? durationDays : unusedLeaveGlobal;

    //   $("#durationdays").val(durationDays);
    //   $("#paiddays").val(paidDays);
    //   $("#unpaiddays").val(unpaidDays);
    // });

    //Edit Section

    $("#dataTableapplyleave tbody").on("click", "tr", function () {
      var dataRow = [];
      $(this)
        .closest("tr")
        .find("td")
        .each(function () {
          dataRow.push($(this).text());
        });
      console.log(dataRow);
      leaveid = dataRow[0];
    });

    $(document).on("click", "#editBtn", function () {
      $.ajax({
        type: "POST",
        url: "/index/getleave",
        data: {
          leaveid: leaveid,
        },
        success: function (result) {
          if (result.msg === "success") {
            const existingData = result.data;

            $.each(existingData, (key, item) => {
              $("#editpendingleaveid").val(item.leaveid);
              $("#editleaveemployeename").val(item.employee);
              $("#editleavetype").val(item.leavetype);
              $("#editleavestartdate").val(item.leavestartdate);
              $("#editleaveenddate").val(item.leaveenddate);
              $("#editleavereason").val(item.leavereason);
              $("#editleaveapplieddate").val(item.leaveapplieddate);
              $("#previewleave").attr(
                "src",
                "data:image/jpg;base64," + item.leaveimage
              );
              $("#editleavedays").val(item.totalleavedays);
              $("#editunusedleave").val(item.unusedleave);
              $("#editusedleave").val(item.usedleave);
              $("#editleaveyear").val(item.leaveyear);
              $("#editleavestatus").val(item.leavestatus);
              $("#editleaveduration").val(item.leaveduration);
              $("#editpaiddays").val(item.leavepaiddays);
              $("#editunpaiddays").val(item.leaveunpaiddays);
            });
          } else {
            swal("Error fetching employee data", "success");
          }
        },
        error: function (err) {
          swal("An error occurred while fetching employee data", err, "error");
        },
      });
    });

    $(document).on(
      "change",
      "#editleavestartdate, #editleaveenddate, #editpaiddays",
      function () {
        let startDate = $("#editleavestartdate").val();
        let endDate = $("#editleaveenddate").val();
        let paidDays = parseFloat($("#editpaiddays").val());
        let unusedLeave = parseFloat($("#editunusedleave").val());
        let duration = calculateLeaveDuration(startDate, endDate);

        if (duration > unusedLeave) {
          let unpaidDays = duration - unusedLeave;
          $("#editpaiddays").val(unusedLeave);
          $("#editunpaiddays").val(unpaidDays);
        } else {
          $("#editleaveduration").val(duration);
          $("#editpaiddays").val(duration);
          $("#editunpaiddays").val(0);
        }
      }
    );

    function calculateLeaveDuration(startDate, endDate) {
      let start = new Date(startDate);
      let end = new Date(endDate);
      let difference = end - start;
      let durationDays = difference / (1000 * 60 * 60 * 24) + 1;
      return Math.round(durationDays);
    }

    $(document).on("click", "#editleavesavebutton", function () {
      let id = leaveid;
      let status = $("#editleavestatus").val();
      let leavetype = $().val("#editleavetype");
      let leavestartdate = $("#editleavestartdate").val();
      let leaveenddate = $("#editleaveenddate").val();
      let leaveduration = $("#editleaveduration").val();
      let leavepaidays = $("#editpaiddays").val();
      let leaveunpaiddays = $("#editunpaiddays").val();
      let comment = $("#editleavecomment").val();
      let leavereason = $("#editleavereason").val();
      let leaveimage = base64String;

      var message = "";

      if (status === "") {
        message += "status is required. ";
      }

      if (leavetype === "") {
        message += "Leave Type is Required is required. ";
      }

      if (leavestartdate === "") {
        message += "Startdate is required. ";
      }

      if (leaveenddate === "") {
        message += "Enddate is required";
      }

      if (leaveduration === "") {
        message += "leaveduration is required. ";
      }

      if (leavepaidays === "") {
        message += "leavepaidays is required. ";
      }

      if (leaveunpaiddays === "") {
        message += "leaveunpaiddays is required. ";
      }

      if (comment === "") {
        message += "comment is required. ";
      }

      if (message !== "") {
        swal("Validation Error", message, "error");
      } else {
        swal({
          title: "Are you sure?",
          text: `Do you want to '${status}' this request?`,
          icon: "warning",
          buttons: true,
          dangerMode: true,
        }).then((willApprove) => {
          if (willApprove) {
            $.ajax({
              type: "POST",
              url: "/eportalrequestleave/update",
              data: {
                employeeid: employeeid,
                leaveid: id,
                status: status,
                leavestartdate: leavestartdate,
                leaveenddate: leaveenddate,
                leaveduration: leaveduration,
                leavepaidays: leavepaidays,
                leaveunpaiddays: leaveunpaiddays,
                leavereason: leavereason,
                comment: comment,
                leaveimage: leaveimage,
              },
              success: function (result) {
                if (result.msg === "success") {
                  swal(
                    "Save Successfully",
                    "You clicked the button!",
                    "success"
                  ).then(() => {
                    window.location.reload();
                  });
                  LoadTable();
                } else if (result.msg === "conflict") {
                  const conflictingDates = result.conflictingDates.join(", ");
                  swal({
                    title: "Date Conflict",
                    text: `The following dates are already taken: ${conflictingDates}`,
                    icon: "warning",
                    button: "OK",
                  });
                } else if (result.msg === "error") {
                  swal({
                    title: "Error",
                    text: "An unexpected error occurred while saving data.",
                    icon: "error",
                    button: "OK",
                  });
                } else {
                  swal({
                    title: "Unknown Response",
                    text: "The server returned an unknown response.",
                    icon: "warning",
                    button: "OK",
                  });
                }
              },
              error: function (err) {
                swal("Error", "An error occurred while saving data.", "error");
              },
              error: function (err) {
                swal("Error", "An error occurred while saving data.", "error");
              },
            });
          } else {
            swal("Action Canceled", "", "info");
          }
        });
      }
    });
  });

  $(document).on("change", "#edituploadimage", function (e) {
    const input = document.getElementById("edituploadimage");
    const file = input.files[0];

    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onloadend = function () {
      const preview = document.getElementById("previewleave");
      preview.src = reader.result;
    };
    imageUploadedleave();
  });

  function imageUploadedleave() {
    const input = document.getElementById("edituploadimage");
    const file = input.files[0];

    var reader = new FileReader();

    reader.onload = function () {
      base64String = reader.result.replace("data:", "").replace(/^.+,/, "");

      imageBase64Stringsep = base64String;
    };
    reader.readAsDataURL(file);
  }

  $(document).on("change", "#uploadimage", function (e) {
    const input = document.getElementById("uploadimage");
    const file = input.files[0];

    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onloadend = function () {
      const preview = document.getElementById("preview");
      preview.src = reader.result;
    };
    imageUploaded();
  });

  function imageUploaded() {
    const input = document.getElementById("uploadimage");
    const file = input.files[0];

    var reader = new FileReader();

    reader.onload = function () {
      base64String = reader.result.replace("data:", "").replace(/^.+,/, "");

      imageBase64Stringsep = base64String;
    };
    reader.readAsDataURL(file);
  }
</script>
