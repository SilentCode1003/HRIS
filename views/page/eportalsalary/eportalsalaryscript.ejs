<script>
  let base64String = "";
  let payrolldate = "";
  let employeeid = "<%= employeeid %>";
  let globalsssid = "";
  let globaltinid = "";
  let globalphilhealthid = "";
  let globalpagibigid = "";
  let globalaccrued13thmonth = "";
  let globalemployeeid = "";
  let globalfullname = "";
  let globalposition = "";
  let globaldepartment = "";
  let globalremainingleave = "";
  let globalstartdate = "";
  let globalenddate = "";
  let globalpayrolldate = "";
  let globalsalary = "";
  let globalperday = "";
  let globalallowances = "";
  let globalbasicadjustments = "";
  let globalpayrolladjustments = "";
  let globalapproveot = "";
  let globalapprovednightot = "";
  let globalapprovenormalot = "";
  let globalapprovedearlyot = "";
  let globalovertimemeal = "";
  let globalleavepay = "";
  let globalregularholidaycomp = "";
  let globalspecialholidaycomp = "";
  let globalregularholidayot = "";
  let globalspecialholidayot = "";
  let globalsuspension_pay = "";
  let globaloverallnetpay = "";
  let globalsssdeductions = "";
  let globalpagibigdeductions = "";
  let globalphilhealthdeductions = "";
  let globaltindeductions = "";
  let globalabsentdeductions = "";
  let globalhealthcard = "";
  let globallatedeductions = "";
  let globaltotaldeductions = "";
  let globaltotalnetpay = "";
  let globaltotalnetpaywords = "";
  let globalloans = "";
  let globalRestDay_OTpay = "";
  let globalsterling_loan = "";
  let globalwisp_deductions = "";
  let globalhousing_loan = "";
  let globaleducation_loan = "";
  let globalshortterm_loan = "";
  let globalcalamity_loan = "";
  let globalrestday_ot = "";
  let globalsalary_loan = "";
  let globalnumlate = "";
  let globalnumabsent = "";
  let globalgpstatus = "";
  let globalleave_with_out_pay = "";
  let globalleave_with_out_pay_deductions = "";
  let globalsuddendedductionsName = [];
  let globalsuddendedductionsAmount = [];

  console.log(globalsuddendedductionsAmount, "globalsuddendeductionsAmount");
  console.log(globalsuddendedductionsName, "globalsuddendeductionsName");

  $(document).ready(function () {
    console.log("Initializee");

    LoadTable();
    function LoadTable() {
      $("#dataTablesalaryhistory").DataTable({
        destroy: true,
        processing: true,
        serverSide: true,
        paging: false,
        searching: false,
        info: false,
        scrollY: 600,
        scrollCollapse: true,
        type: "GET",
        ajax: {
          url: "/eportalsalary/getpayrolldate",
          dataSrc: (json) => {
            var finalData = [];
            var data = json.data;

            console.log(data);
            $.each(data, (key, item) => {
              var action = "";
              var status = item.status;

              action = `
              <button id="editBtn" class="btn text-primary" name="editBtn" data-bs-toggle="modal" data-bs-target="#payslipmodal"><i class="fas fa-fw fa-eye"></i></button>
              `;

              finalData.push({
                daterange: item.daterange,
                payrolldate: item.payrolldate,
                cutoff: item.cutoff,
                salary: formatToCurrency(item.totalsalary),
                totalhours: item.totalhours,
                nightdiff: item.nightdiff,
                normal_ot: item.normalot,
                early_ot: item.earlyot,
                total_late_time: item.totalminutes,
                totalnetpay: formatToCurrency(item.totalnetpay),
                action: action,
              });
            });

            console.log(finalData);

            return finalData;
          },
        },
        columnDefs: [
          {
            targets: 1,
            className: "td-indent",
          },
        ],
        columns: [
          { data: "daterange" },
          { data: "payrolldate" },
          { data: "cutoff" },
          { data: "salary" },
          { data: "totalhours" },
          { data: "nightdiff" },
          { data: "normal_ot" },
          { data: "early_ot" },
          { data: "total_late_time" },
          { data: "totalnetpay" },
          { data: "action" },
        ],
        createdRow: function (row, data, dataIndex) {
          var totalnetpayCell = $(row).find("td:eq(9)");
          // var leaveenddateCell = $(row).find("td:eq(4)");
          // var applieddateCell = $(row).find("td:eq(6)");

          // leavestartdateCell.wrapInner(
          //   "<span class='leavestartdate-text'></span>"
          // );
          //leaveenddateCell.wrapInner("<span class='leaveenddate-text'></span>");
          totalnetpayCell.wrapInner("<span class='approved-status'></span>");

          $("td", row).each(function (index) {
            this.style.textAlign = "center";
            this.style.verticalAlign = "middle";
          });
        },
        initComplete: function () {},
      });
    }

    $("#dataTablesalaryhistory tbody").on("click", "tr", function () {
      var dataRow = [];
      $(this)
        .closest("tr")
        .find("td")
        .each(function () {
          dataRow.push($(this).text());
        });
      console.log(dataRow);
      payrolldate = dataRow[1];
    });

    $(document).on("click", "#editBtn", function () {
      $.ajax({
        type: "POST",
        url: "/eportalsalary/loadprofileslip",
        data: {
          employeeid: employeeid,
          payrolldate: payrolldate,
        },
        success: function (result) {
          if (result.msg === "success") {
            const existingData = result.data;
            console.log(existingData);
            $.each(existingData, (key, item) => {
              $("#preview").attr(
                "src",
                "data:image/jpg;base64," + item.image
              );
              $("#employeename").text(item.fullname);
              $("#position").text(item.position);
              $("#department").text(item.department);
              $("#payrollrange").text(
                formatDate(item.startdate) + " To " + formatDate(item.enddate)
              );
              $("#payrolldate").text(formatDate(item.payrolldate));
              $("#salary").text(formatToCurrency(item.salary));
              $("#basicadjustments").text(
                formatToCurrency(item.basic_adjustments)
              );
              $("#payrolladjustments").text(
                formatToCurrency(item.payroll_adjustments)
              );
              $("#overtimemeal").text(formatToCurrency(item.overtime_meal));
              $("#loandeductions").text(formatToCurrency(item.loans));
              $("#leavepayprofile").text(formatToCurrency(item.leave_pay));
              $("#dailyrate").text(formatToCurrency(item.basic_perday));
              $("#allowances").text(formatToCurrency(item.allowances));
              $("#compensation").text(formatToCurrency(item.compensation));
              $("#deductions").text(formatToCurrency(item.total_deductions));
              $("#totalnetpay").text(formatToCurrency(item.total_netpay));
              $("#workdays").text(item.workdays);
              $("#restday").text(item.restday);
              $("#present").text(item.present);
              $("#absent").text(item.absent);
              $("#holidayday").text(item.holidaydays);
              $("#leavepaydadys").text(item.leaveday);
              $("#restdayot").text(item.restotday);
              $("#13thmonthpay").text(formatToCurrency(item.accrued13thmonth));
            });
            

            $.ajax({
              url: "eportalsalary/loaddinamicamount",
              type: "POST",
              contentType: "application/json", 
              data: JSON.stringify({
                payrolldate: payrolldate, 
                employeeid: employeeid,
              }),
              dataType: "json",
              success: function (response) {
               
                if (response && response.data) {

                  $("#dinamicloanname").empty();
                  $("#dinamicloandeductions").empty();

                  response.data.forEach((item) => {
                    $("#dinamicloanname").append(
                      `<p class="mb-0 payroll-label">${item.loan_type}</p>`
                    );
                    $("#dinamicloandeductions").append(
                      `<p class="text-muted mb-0">${(formatToCurrency(item.loan_amount))}</p>`
                    );
                  });
                } else {
                  console.error("Unexpected response format:", response);
                }
              },
              error: function (xhr, status, error) {
                console.error("AJAX error:", status, error);
              },
            });
          } else {
            swal("Error fetching employee data", msg, "error");
          }
        },
        error: function (err) {
          swal("An error occurred while fetching employee data", msg, "error");
        },
      });
    });

    $(document).on("click", "#nav-payslip-tab", function () {
      $.ajax({
        type: "POST",
        url: "/eportalsalary/loadpayslip",
        data: {
          employeeid: employeeid,
          payrolldate: payrolldate,
        },
        success: function (result) {
          if (result.msg === "success") {
            const existingData = result.data;

            console.log(existingData);
            $.each(existingData, (key, item) => {
              $("#payslipdailytotal").html(
                "<strong> ( " + item.presentdays_gp + " )</strong>"
              );
              globalgpstatus = item.presentdays_gp;
              $("#payslipSSSid").text(item.sssid);
              globalsssid = item.sssid;
              $("#payslipTINid").text(item.tinid);
              globaltinid = item.tinid;
              $("#payslipphilhealthid").text(item.philhealthid);
              globalphilhealthid = item.philhealthid;
              $("#payslipdeppagibigid").text(item.pagibigid);
              globalpagibigid = item.pagibigid;
              $("#payslipheader13thmonthpay").text(item.accrued13thmonth);
              globalaccrued13thmonth = item.accrued13thmonth;
              $("#payslippayrolltype").text(item.payrolltype);
              globalpayrolltype = item.payrolltype;
              $("#payslipid").text(item.employeeid);
              globalemployeeid = item.employeeid;
              $("#payslipname").text(item.fullname);
              globalfullname = item.fullname;
              $("#payslipempname").text(item.fullname);
              $("#payslipposition").text(item.position);
              globalposition = item.position;
              $("#payslipdepartment").text(item.department);
              globaldepartment = item.department;
              $("#payslipremainingleave").text(item.remaining_leave);
              globalremainingleave = item.remaining_leave;
              $("#paysliprange").text(
                formatDate(item.startdate) +
                  "- TO - " +
                  formatDate(item.enddate)
              );
              globalstartdate = item.startdate;
              globalenddate = item.enddate;
              $("#payslipdate").text(formatDate(item.payrolldate));
              globalpayrolldate = item.payrolldate;
              $("#payslipbasic").text(formatToCurrency(item.salary));
              globalsalary = item.salary;
              $("#payslipperday").text(formatToCurrency(item.basic_perday));
              globalperday = item.basic_perday;
              $("#payslipallowances").text(formatToCurrency(item.allowances));
              globalallowances = item.allowances;
              $("#payslipbasicadustments").text(
                formatToCurrency(item.basic_adjustments)
              );
              globalbasicadjustments = item.basic_adjustments;
              $("#paysliploans").text(formatToCurrency(item.loans));
              globalloans = item.loans;
              $("#payslippayrolladjustments").text(
                formatToCurrency(item.payroll_adjustments)
              );
              globalpayrolladjustments = item.payroll_adjustments;
              $("#payslipovertime").text(formatToCurrency(item.approveOT));
              globalapproveot = item.approveOT;
              $("#payslipndpay").text(formatToCurrency(item.approvedNightOT));
              globalapprovednightot = item.approvedNightOT;
              $("#payslipotpay").text(formatToCurrency(item.approveNormalOT));
              globalapprovenormalot = item.approveNormalOT;
              $("#payslipearlypay").text(
                formatToCurrency(item.approvedEarlyOT)
              );
              globalapprovedearlyot = item.approvedEarlyOT;
              $("#payslipotmeal").text(formatToCurrency(item.overtime_meal));
              globalovertimemeal = item.overtime_meal;
              $("#payslipleavepay").text(formatToCurrency(item.leave_pay));
              globalleavepay = item.leave_pay;
              $("#payslipregular").text(
                formatToCurrency(item.regularholidayComp)
              );
              globalregularholidaycomp = item.regularholidayComp;
              $("#payslipspecial").text(
                formatToCurrency(item.specialholidayComp)
              );
              globalspecialholidaycomp = item.specialholidayComp;
              $("#payslipregularovertime").text(
                formatToCurrency(item.regularholidayOT)
              );
              globalregularholidayot = item.regularholidayOT;
              $("#payslipspecialovertime").text(
                formatToCurrency(item.specialholidayOT)
              );
              globalspecialholidayot = item.specialholidayOT;

              let suspensionPay = item.suspension_pay;
              let leaveNoPay = item.leave_with_out_pay;
              let leaveNoPayDeductions = item.leave_with_out_pay_deductions;
              if (suspensionPay === 0) {
                $("#payslipsuspensionpay").closest("tr").hide();
              } else {
                $("#payslipsuspensionpay").closest("tr").show();
                $("#payslipsuspensionpay").text(
                  formatToCurrency(suspensionPay)
                );
              }
              globalsuspension_pay = item.suspension_pay;
              globalleave_with_out_pay = item.leave_with_out_pay;
              globalleave_with_out_pay_deductions = item.leave_with_out_pay_deductions;

              if (suspensionPay === 0 && leaveNoPay === 0 && leaveNoPayDeductions === 0) {
                  $("#payslipsuspensionpay").closest("tr").hide();
              } else {
                  $("#payslipsuspensionpay").closest("tr").show();
                  if (suspensionPay > 0) {
                      $("#payslipsuspensionpay").text(formatToCurrency(suspensionPay));
                  } else {
                      $("#payslipsuspensionpay").text("");
                  }
                  if (leaveNoPay > 0) {
                      $("#payslipnopay").html(
                          "<strong> ( " + leaveNoPay + " )</strong>"
                      );
                  } else {
                      $("#payslipnopay").html("");
                  }
                  if (leaveNoPayDeductions > 0) {
                      $("#payslipnopaydeductions").text(
                          formatToCurrency(leaveNoPayDeductions)
                      );
                  } else {
                      $("#payslipnopaydeductions").text("");
                  }
              }

              $("#paysliptotal").text(formatToCurrency(item.overall_netpay));
              globaloverallnetpay = item.overall_netpay;
              $("#payslipsss").text(formatToCurrency(item.sss_dedcutions));
              globalsssdeductions = item.sss_dedcutions;
              $("#payslippagibig").text(
                formatToCurrency(item.pagibigdeductions)
              );
              globalpagibigdeductions = item.pagibigdeductions;
              $("#paysliphdmf").text(
                formatToCurrency(item.philhealthdeductions)
              );
              globalphilhealthdeductions = item.philhealthdeductions;
              $("#paysliptin").text(formatToCurrency(item.tindeductions));
              globaltindeductions = item.tindeductions;
              $("#payslipabsent").text(
                formatToCurrency(item.absent_deductions)
              );
              globalabsentdeductions = item.absent_deductions;
              $("#payslipnumabsent").html("<strong> ( " + item.absent + " )</strong>");
              globalnumabsent = item.absent;
              $("#paysliphealthcard").text(formatToCurrency(item.healthcard));
              globalhealthcard = item.healthcard;
              $("#payslipcalamity").text(formatToCurrency(item.calamity_loan));
              globalcalamity_loan = item.calamity_loan;
              $("#payslipshortterm").text(
                formatToCurrency(item.shortterm_loan)
              );
              globalshortterm_loan = item.shortterm_loan;
              $("#paysliphousing").text(formatToCurrency(item.housing_loan));
              globalhousing_loan = item.housing_loan;
              $("#payslipeducationloan").text(
                formatToCurrency(item.education_loan)
              );
              globaleducation_loan = item.education_loan;
              $("#payslipsterlingloan").text(
                formatToCurrency(item.sterling_loan)
              );
              globalsterling_loan = item.sterling_loan;
              $("#payslipwisp").text(formatToCurrency(item.wisp_deductions));
              globalwisp_deductions = item.wisp_deductions;
              $("#paysliprestdayot").text(formatToCurrency(item.restday_ot));
              globalrestday_ot = item.restday_ot;
              $("#paysliplate").text(formatToCurrency(item.late_deductions));
              globallatedeductions = item.late_deductions;
              $("#payslipnumlate").html("<strong> ( " + item.latehours + " : " + item.lateminutes + " )</strong>");
              globalnumlate = (item.latehours + " : " + item.lateminutes);
              $("#payslipsalaryloan").text(formatToCurrency(item.salary_loan));
              globalsalary_loan = item.salary_loan;
              $("#paysliptotaldeductions").text(
                formatToCurrency(item.total_deductions)
              );
              globaltotaldeductions = item.total_deductions;
              $("#paysliptotalnetpay").text(
                formatToCurrency(item.total_netpay)
              );
              globaltotalnetpay = item.total_netpay;
              // $("#totalNetPayWords").text(
              //   convertCurrencyToWords(item.total_netpay)
              // );
              // globaltotalnetpaywords = item.total_netpay

              // const currencyAmount = total_netpay;
              // console.log(convertCurrencyToWords(currencyAmount));

              console.log("Setting salary:", item.salary);
            });

            $.ajax({
              type: "POST",
              url: "/generatepayroll/sudden_deduc_load",
              data: {
                payrolldate: payrolldate,
              },
              success: function (deductionResult) {
                console.log("API Response:", deductionResult); // Debugging statement

                if (deductionResult.msg === "success") {
                  const suddenDeductions = deductionResult.data;

                  console.log("Sudden Deductions Data:", suddenDeductions); // Debugging statement

                  let deductionNameHtml = "";
                  let deductionAmountHtml = "";

                  // Clear global arrays before populating new data
                  globalsuddendedductionsName = [];
                  globalsuddendedductionsAmount = [];

                  // Check if suddenDeductions is an array
                  if (Array.isArray(suddenDeductions)) {
                    // Iterate over each sudden deduction
                    $.each(suddenDeductions, (index, deduction) => {
                      console.log(`Processing Deduction ${index}:`, deduction); // Debugging statement

                      deductionNameHtml += `<p>${deduction.deduction_name}</p>`;
                      deductionAmountHtml += `<p>${formatToCurrency(
                        deduction.amount
                      )}</p>`;

                      // Store data in global arrays
                      globalsuddendedductionsName.push(
                        deduction.deduction_name
                      );
                      globalsuddendedductionsAmount.push(deduction.amount);
                    });

                    // Update HTML containers with sudden deductions data
                    $("#suddenDeductionsContainerName").html(deductionNameHtml);
                    $("#suddenDeductionsContainerAmount").html(
                      deductionAmountHtml
                    );
                  } else {
                    console.error("Unexpected data format:", suddenDeductions); // Debugging statement
                  }
                } else {
                  swal(
                    "Error fetching sudden deductions data",
                    deductionResult.msg,
                    "error"
                  );
                }
              },
              error: function (err) {
                console.error("AJAX Error:", err);
                swal(
                  "An error occurred while fetching sudden deductions data",
                  err.message,
                  "error"
                );
              },
            });
          } else {
            swal("Error fetching employee data", msg, "error");
          }
        },
        error: function (err) {
          swal("An error occurred while fetching employee data", msg, "error");
        },
      });
    });

    $(document).on("click", "#nav-date-tab", function () {
      $(`#dataTablePayslip`).find("tr:gt(0)").remove();
      $.ajax({
        type: "POST",
        url: "/generatepayroll/loadpayslipdetailed",
        data: {
          employeeid: employeeid,
          payrolldate: payrolldate,
        },
        success: function (result) {
          if (result.msg === "success") {
            const existingData = result.data;

            $.each(existingData[0], (key, item) => {
              $("#datename").text(item.EmployeeFullName);
            });
          } else {
            swal("Error fetching");
          }

          var finalData = [];
          var data = result.data;

          if ($.fn.DataTable.isDataTable("#dataTablePayslip")) {
            $("#dataTablePayslip").DataTable().destroy();
          }
          material_list_tbl = document.getElementById("dataTablePayslip");

          console.log(data);

          $.each(data[0], function (key, item) {
            var row = material_list_tbl.insertRow(1);
            var DATE = row.insertCell(0);
            var ATTENDANCE_STATUS = row.insertCell(1);
            var CLOCK_IN = row.insertCell(2);
            var CLOCK_OUT = row.insertCell(3);
            var LATE_MINUTES = row.insertCell(4);
            var LATE_HOURS = row.insertCell(5);
            var EARLY_OT = row.insertCell(6);
            var NIGHT_DIFF = row.insertCell(7);
            var NORMAL_OT = row.insertCell(8);
            var TOTAL_HOURS = row.insertCell(9);
            var TOTAL_MINUTES = row.insertCell(10);

            DATE.innerHTML = formatDate(item.gp_attendancedate);
            ATTENDANCE_STATUS.innerHTML = item.Attendance_Status;
            CLOCK_IN.innerHTML = item.TimeIn;
            CLOCK_OUT.innerHTML = item.TimeOut;
            LATE_MINUTES.innerHTML = item.Late_Minutes;
            LATE_HOURS.innerHTML = item.Late_Hours;
            EARLY_OT.innerHTML = item.EarlyOt;
            NIGHT_DIFF.innerHTML = item.NightDiff;
            NORMAL_OT.innerHTML = item.NormalOt;
            TOTAL_HOURS.innerHTML = item.Total_Hours;
            TOTAL_MINUTES.innerHTML = item.Total_Minutes;

            console.log(ATTENDANCE_STATUS);

            $.each(
              [
                DATE,
                ATTENDANCE_STATUS,
                CLOCK_IN,
                CLOCK_OUT,
                LATE_MINUTES,
                LATE_HOURS,
                EARLY_OT,
                NIGHT_DIFF,
                NORMAL_OT,
                TOTAL_HOURS,
                TOTAL_MINUTES,
              ],
              function (_, cell) {
                cell.style.textAlign = "center";
                cell.style.verticalAlign = "middle";
              }
            );
          });
        },
        error: function (xhr, status, error) {},
      });
    });

    $("#downloadpfd").click(function () {
      console.log("Initiating PDF download...");

      // Ensure global arrays have the correct data
      console.log("GlobalsuddendeductionsName:", globalsuddendedductionsName);
      console.log(
        "GlobalsuddendeductionsAmount:",
        globalsuddendedductionsAmount
      );

      $.ajax({
        url: "/eportalsalary/generatepdf",
        type: "POST",
        data: {
          employeeid: employeeid,
          payrolldate: payrolldate,
          globalsssid: globalsssid,
          globaltinid: globaltinid,
          globalphilhealthid: globalphilhealthid,
          globalpagibigid: globalpagibigid,
          globalemployeeid: globalemployeeid,
          globalfullname: globalfullname,
          globalposition: globalposition,
          globaldepartment: globaldepartment,
          globalremainingleave: globalremainingleave,
          globalstartdate: globalstartdate,
          globalenddate: globalenddate,
          globalpayrolldate: globalpayrolldate,
          globalsalary: globalsalary,
          globalperday: globalperday,
          globalallowances: globalallowances,
          globalbasicadjustments: globalbasicadjustments,
          globalpayrolladjustments: globalpayrolladjustments,
          globalapproveot: globalapproveot,
          globalapprovednightot: globalapprovednightot,
          globalapprovenormalot: globalapprovenormalot,
          globalapprovedearlyot: globalapprovedearlyot,
          globalovertimemeal: globalovertimemeal,
          globalleavepay: globalleavepay,
          globalregularholidaycomp: globalregularholidaycomp,
          globalspecialholidaycomp: globalspecialholidaycomp,
          globalregularholidayot: globalregularholidayot,
          globalspecialholidayot: globalspecialholidayot,
          globaloverallnetpay: globaloverallnetpay,
          globalsssdeductions: globalsssdeductions,
          globalpagibigdeductions: globalpagibigdeductions,
          globalphilhealthdeductions: globalphilhealthdeductions,
          globaltindeductions: globaltindeductions,
          globalabsentdeductions: globalabsentdeductions,
          globalhealthcard: globalhealthcard,
          globallatedeductions: globallatedeductions,
          globaltotaldeductions: globaltotaldeductions,
          globaltotalnetpay: globaltotalnetpay,
          globaltotalnetpaywords: globaltotalnetpaywords,
          globalsuddendeductionsName: globalsuddendedductionsName,
          globalsuddendeductionsAmount: globalsuddendedductionsAmount,
          globalrestday_ot: globalrestday_ot,
          globalsalary_loan: globalsalary_loan,
          globalwisp_deductions: globalwisp_deductions,
          globalcalamity_loan: globalcalamity_loan,
          globaleducation_loan: globaleducation_loan,
          globalshortterm_loan: globalshortterm_loan,
          globalsterling_loan: globalsterling_loan,
          globalhousing_loan: globalhousing_loan,
          globalnumlate: globalnumlate,
          globalnumabsent: globalnumabsent,
          globalaccrued13thmonth: globalaccrued13thmonth,
          globalsuspension_pay: globalsuspension_pay,
          globalgpstatus: globalgpstatus,
          globalleave_with_out_pay: globalleave_with_out_pay,
          globalleave_with_out_pay_deductions: globalleave_with_out_pay_deductions,
        },
        dataType: "text",
        success: function (data) {
          console.log("PDF data received from server:", data);

          const blob = b64toBlob(data, "application/pdf");
          const link = document.createElement("a");
          link.href = URL.createObjectURL(blob);
          link.download = `"${payrolldate}"_payslip.pdf`;
          document.body.appendChild(link);
          link.click();

          document.body.removeChild(link);
          URL.revokeObjectURL(link.href);
          swal({
            icon: "success",
            title: "PDF Downloaded!",
            text: "The PDF has been downloaded successfully.",
          });
        },
        error: function (xhr, status, error) {
          console.error("Error downloading PDF:", error);
          swal("Error downloading PDF");
        },
      });
    });

    //#region function
    function b64toBlob(b64Data, contentType = "", sliceSize = 512) {
      const byteCharacters = atob(b64Data);
      const byteArrays = [];

      for (
        let offset = 0;
        offset < byteCharacters.length;
        offset += sliceSize
      ) {
        const slice = byteCharacters.slice(offset, offset + sliceSize);

        const byteNumbers = new Array(slice.length);
        for (let i = 0; i < slice.length; i++) {
          byteNumbers[i] = slice.charCodeAt(i);
        }

        const byteArray = new Uint8Array(byteNumbers);
        byteArrays.push(byteArray);
      }

      const blob = new Blob(byteArrays, { type: contentType });
      return blob;
    }

    //#endregion
  });
</script>
