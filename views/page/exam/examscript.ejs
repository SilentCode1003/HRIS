<script>
  let examid = "";
  let base64String = "";

  $(document).ready(function () {
    LoadTable();
    LoadList();
    LoadEditEmp();
    searchTable();

    $(document).on("keyup", "#myInput", function () {
      searchTable();
    });

    function LoadTable() {
      $("#dataTableExam").DataTable({
        destroy: true,
        processing: true,
        serverSide: true,
        paging: false,
        searching: false,
        info: false,
        scrollY: 600,
        scrollCollapse: true,
        serverMethod: "GET",
        ajax: {
          url: "/exam/load",
          dataSrc: (json) => {
            var finalData = [];
            var data = json.data;

            $.each(data, (key, item) => {
              var action = "";
              var status = item.status;

              action = `
                      <button id="editBtn" class="btn text-primary" name="editBtn" data-bs-toggle="modal" data-bs-target="#edithealthrecordmodal"><i class="fas fa-fw fa-pen"></i></button>
                      <button id="addQuestionBtn" class="btn text-success" name="addQuestionBtn" data-bs-toggle="modal" data-bs-target="#addquestionmodal"><i class="fas fa-fw fa-plus"></i></button>
                     `;

              finalData.push({
                examid: item.examid,
                examname: item.examname,
                duration: item.duration,
                createby: item.createby,
                createdate: item.createdate,
                action: action,
              });
            });

            return finalData;
          },
        },
        columnDefs: [
          {
            targets: 1,
            className: "td-indent",
          },
        ],
        columns: [
          { data: "examid" },
          { data: "examname" },
          { data: "duration" },
          { data: "createby" },
          { data: "createdate" },
          { data: "action" },
        ],

        createdRow: function (row, data, dataIndex) {
          $("td", row).each(function (index) {
            this.style.textAlign = "center";
            this.style.verticalAlign = "middle";
          });
        },
        initComplete: function () {},
      });
    }

    $(document).on("click", "#examsavebtn", function () {
      let examname = $("#examname").val();
      let examDuration = $("#formattedTime").val();
      let examicon = base64String;

      console.log(examname, "name");
      console.log(examDuration, "duration");

      var message = "";

      if (examname == "") {
        message += "shiftname is required ";
      }

      if (examDuration == "") {
        message += "Duration is required ";
      }

      if (message !== "") {
        swal("Validation Error", message, "error");
      } else {
        $.ajax({
          type: "POST",
          url: "/exam/save",
          data: {
            examname: examname,
            examicon: examicon,
            examduration: examDuration,
          },
          success: function (result) {
            if (result.msg == "success") {
              swal(
                "Update Successfully",
                "You clicked the button!",
                "success"
              ).then((results) => {
                window.location.reload();
              });
              LoadTable();
            } else if (result.msg == "exist") {
              swal("Exist", "Data already exists!", "warning");
            }
          },
          error: function (err) {
            swal("Error", "An error occurred while saving data.", "error");
          },
        });
      }
    });

    function LoadList() {
      $.ajax({
        type: "GET",
        url: "/employee/load",
        success: function (result) {
          var data = result.data;

          $.each(data, function (key, item) {
            var options = new Option(item.id, item.id);
            $(options).html(item.fullname);
            $("#healthrecordemployeeid").append(options);
          });
        },
        error: function (result) {
          alert("error: " + result.data);
        },
      });
    }

    function LoadEditEmp() {
      $.ajax({
        type: "GET",
        url: "/employee/load",
        success: function (result) {
          var data = result.data;

          $.each(data, function (key, item) {
            var options = new Option(item.id, item.id);
            $(options).html(item.fullname);
            $("#edithealthrecordemployeeid").append(options);
          });
        },
        error: function (result) {
          alert("error: " + result.data);
        },
      });
    }

    $("#dataTableExam tbody").on("click", "tr", function () {
      var dataRow = [];
      $(this)
        .closest("tr")
        .find("td")
        .each(function () {
          dataRow.push($(this).text());
        });
      examid = dataRow[0];
    });

    $(document).on("click", "#editBtn", function () {
      $.ajax({
        type: "POST",
        url: "/healthrecord/gethealthrecord",
        data: {
          healthid: healthid,
        },
        success: function (result) {
          if (result.msg === "success") {
            const existingData = result.data;

            $.each(existingData, (key, item) => {
              $("#id").val(item.healthid);
              $("#edithealthrecordemployeeid").val(item.employeeid);
              $("#edithealthrecordbloodtype").val(item.bloodtype);
              $("#edithealthrecordmedicalcondition").val(item.medicalcondition);
              $("#edithealthrecordprescribemedication").val(
                item.prescribemedications
              );
              $("#edithealthrecordemergencycontactname").val(
                item.ercontactname
              );
              $("#edithealthrecordemergencycontactnumber").val(
                item.ercontactphone
              );
              $("#edithealthrecordlastcheckup").val(item.lastcheckup);
              $("#edithealthrecordinsurance").val(item.insurance);
              $("#edithealthrecordinsurancenumber").val(item.insurancenumber);
            });
          } else {
            swal("Error fetching employee data", "success");
          }
        },
        error: function (err) {
          swal("An error occurred while fetching employee data", err, "error");
        },
      });
    });
    $(document).on("click", "#edithealthrecordsavebtn", function () {
      let id = healthid;
      let employeeid = $("#edithealthrecordemployeeid").val();
      let bloodtype = $("#edithealthrecordbloodtype").val();
      let medicalcondition = $("#edithealthrecordmedicalcondition").val();
      let prescribemedications = $(
        "#edithealthrecordprescribemedication"
      ).val();
      let ercontactname = $("#edithealthrecordemergencycontactname").val();
      let ercontactphone = $("#edithealthrecordemergencycontactnumber").val();
      let lastcheckup = $("#edithealthrecordlastcheckup").val();
      let insurance = $("#edithealthrecordinsurance").val();
      let insurancenumber = $("#edithealthrecordinsurancenumber").val();

      var message = "";

      if (employeeid === "") {
        message += "departmentname is required. ";
      }

      if (bloodtype === "") {
        message += "status is required. ";
      }

      if (medicalcondition === "") {
        message += "departmenthead is required. ";
      }

      if (prescribemedications === "") {
        message += "status is required. ";
      }

      if (ercontactname === "") {
        message += "status is required. ";
      }

      if (ercontactphone === "") {
        message += "status is required. ";
      }

      if (lastcheckup === "") {
        message += "status is required. ";
      }

      if (insurance === "") {
        message += "status is required. ";
      }

      if (insurancenumber === "") {
        message += "status is required. ";
      }

      if (message !== "") {
        swal("Validation Error", message, "error");
      } else {
        $.ajax({
          type: "POST",
          url: "healthrecord/update",
          data: {
            healthid: id,
            employeeid: employeeid,
            bloodtype: bloodtype,
            medicalcondition: medicalcondition,
            prescribemedications: prescribemedications,
            ercontactname: ercontactname,
            ercontactphone: ercontactphone,
            lastcheckup: lastcheckup,
            insurance: insurance,
            insurancenumber: insurancenumber,
          },
          success: function (result) {
            if (result.msg == "success") {
              swal(
                "Update Successfully",
                "You clicked the button!",
                "success"
              ).then((results) => {
                window.location.reload();
              });
              LoadTable();
            } else if (result.msg == "exist") {
              swal("Exist", "Data already exists!", "warning");
            }
          },
          error: function (err) {
            swal("Error", "An error occurred while saving data.", "error");
          },
        });
      }
    });
    $(document).on("change", "#addicon", function (e) {
      const input = document.getElementById("addicon");
      const file = input.files[0];

      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onloadend = function () {
        const preview = document.getElementById("preview");
        preview.src = reader.result;
      };
      imageUploaded();
    });

    function imageUploaded() {
      const input = document.getElementById("addicon");
      const file = input.files[0];

      var reader = new FileReader();

      reader.onload = function () {
        base64String = reader.result.replace("data:", "").replace(/^.+,/, "");

        imageBase64Stringsep = base64String;
      };
      reader.readAsDataURL(file);
    }

    $(document).on("change", "#addquestionimage", function (e) {
      const input = document.getElementById("addquestionimage");
      const file = input.files[0];

      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onloadend = function () {
        const preview = document.getElementById("previewleave");
        preview.src = reader.result;
      };
      imageUploaded();
    });

    function imageUploaded() {
      const input = document.getElementById("addicon");
      const file = input.files[0];

      var reader = new FileReader();

      reader.onload = function () {
        base64String = reader.result.replace("data:", "").replace(/^.+,/, "");

        imageBase64Stringsep = base64String;
      };
      reader.readAsDataURL(file);
    }

    $(document).on("change", "#editicon", function (e) {
      const input = document.getElementById("editicon");
      const file = input.files[0];

      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onloadend = function () {
        const preview = document.getElementById("editpreview");
        preview.src = reader.result;
      };
      EditImage();
    });

    function EditImage() {
      const input = document.getElementById("editicon");
      const file = input.files[0];

      var reader = new FileReader();

      reader.onload = function () {
        base64String = reader.result.replace("data:", "").replace(/^.+,/, "");

        imageBase64Stringsep = base64String;
      };
      reader.readAsDataURL(file);
    }
  });

  function searchTable() {
    var input, filter, found, table, tr, td, i, j;
    input = document.getElementById("myInput");
    filter = input.value.toUpperCase();
    table = document.getElementById("dataTableExam");
    tr = table.getElementsByTagName("tr");
    for (i = 0; i < tr.length; i++) {
      td = tr[i].getElementsByTagName("td");
      for (j = 0; j < td.length; j++) {
        if (td[j].innerHTML.toUpperCase().indexOf(filter) > -1) {
          found = true;
        }
      }
      if (found) {
        tr[i].style.display = "";
        found = false;
      } else {
        tr[i].style.display = "none";
      }
    }
  }

  function formatExamTime() {
    const hours = parseInt(document.getElementById("hoursInput").value) || 0;
    const minutes =
      parseInt(document.getElementById("minutesInput").value) || 0;
    const seconds =
      parseInt(document.getElementById("secondsInput").value) || 0;

    // Limit maximum values
    document.getElementById("hoursInput").value = Math.min(hours, 23);
    document.getElementById("minutesInput").value = Math.min(minutes, 59);
    document.getElementById("secondsInput").value = Math.min(seconds, 59);

    const formattedTime = `${hours.toString().padStart(2, "0")}:${minutes
      .toString()
      .padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`;

    // Update the value of the hidden input field with the formatted time
    document.getElementById("formattedTime").value = formattedTime;
  }

  // Initialize with default value
  formatExamTime();
</script>
