<script>
  let startdate = "";
  let enddate = "";
  let PayrollDate = "";
  let employeeid = "";
  let contributionid = "";
  let startpayrolldate = "";
  let endpayrolldate = "";

  $(document).ready(function () {
    console.log("Initialize");
    searchTable();
    LoadPayrollDate();
    //LoadYear();
    LoadAllPayrollDate();

    $(document).on("keyup", "#myInput", function () {
      searchTable();
    });

    function LoadPayrollDate() {
      $.ajax({
        type: "GET",
        url: "/setpayrolldate/loadreqbeforepayout",
        success: function (result) {
          var data = result.data;

          $.each(data, function (key, item) {
            var options = new Option(item.payrolldate, item.payrolldate);
            $(options).html(item.payrolldate);
            $("#payrollDateSelect").append(options);
          });
        },
        error: function (result) {
          alert("error: " + result.data);
        },
      });
    }

    // function LoadPayrollDate() {
    //   $.ajax({
    //     type: "GET",
    //     url: "/generatepayroll/payrolldateload",
    //     success: function (result) {
    //       var data = result.data;
    //       function populateSelectOptions(selectElementId) {
    //         var $select = $("#" + selectElementId);
    //         $select.empty();

    //         $select.append("<option selected disabled>Choose</option>");
    //         $.each(data, function (key, item) {
    //           var option = new Option(item.payrolldate, item.payrolldate);
    //           $(option).html(item.payrolldate);
    //           $select.append(option);
    //         });
    //       }
    //       populateSelectOptions("loademplyrcontribution");
    //       populateSelectOptions("genemplyrcontribution");
    //       populateSelectOptions("emplyrcontribution");
    //     },
    //     error: function (result) {
    //       showSweetAlert("Error", result.responseText, "error");
    //     },
    //   });
    // }

    function LoadAllPayrollDate() {
      $.ajax({
        type: "GET",
        url: "/retropay/viewpayrolldates",
        success: function (result) {
          var data = result.data;
          $("#startpd").empty();
          $("#endpd").empty();
          $.each(data, function (key, item) {
            var option = new Option(item.payrolldate, item.payrolldate);
            $("#startpd").append($(option).clone());
            $("#endpd").append($(option).clone());
          });
        },
        error: function (result) {
          alert("error: " + result.data);
        },
      });
    }

    // function LoadYear() {
    //   $.ajax({
    //     type: "GET",
    //     url: "/generate13thmonth/selectyear",
    //     success: function (result) {
    //       var data = result.data;
    //       function populateSelectOptions(selectElementId) {
    //         var $select = $("#" + selectElementId);
    //         $select.empty();

    //         $select.append("<option selected disabled>Choose</option>");
    //         $.each(data, function (key, item) {
    //           var option = new Option(item.year, item.year);
    //           $(option).html(item.year);
    //           $select.append(option);
    //         });
    //       }
    //       populateSelectOptions("loademplyrcontribution");
    //       populateSelectOptions("genyear");
    //       populateSelectOptions("emplyrcontribution");
    //     },
    //     error: function (result) {
    //       showSweetAlert("Error", result.responseText, "error");
    //     },
    //   });
    // }

    $(document).on("click", "#emplyrcontributionsaveBtn", function () {
      let payrolldate = $("#emplyrcontribution").val();

      if (!payrolldate) {
        swal("Validation Error", "Payroll date is required.", "error");
        return;
      }
      $.ajax({
        type: "POST",
        url: "/employer_contribution/exportreports",
        data: JSON.stringify({ payrolldate: payrolldate }),
        contentType: "application/json",
        xhrFields: {
          responseType: "blob",
        },
        success: function (blob) {
          var url = window.URL.createObjectURL(blob);

          var a = document.createElement("a");
          a.href = url;
          a.download = `Employer_Contribution_${payrolldate}.xlsx`;
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);

          window.URL.revokeObjectURL(url);

          swal(
            "Success",
            "The report has been downloaded successfully.",
            "success"
          );
        },
        error: function (xhr, status, error) {
          var errorMessage = "An unexpected error occurred.";
          if (xhr.responseType === "blob") {
            var reader = new FileReader();
            reader.onload = function () {
              try {
                var errorJson = JSON.parse(reader.result);
                errorMessage = errorJson.error || errorMessage;
              } catch (e) {
                errorMessage = reader.result || errorMessage;
              }
              swal("Error", errorMessage, "error");
            };
            reader.readAsText(xhr.response);
          } else {
            errorMessage = xhr.responseText || errorMessage;
            swal("Error", errorMessage, "error");
          }
          console.error("AJAX Error:", xhr, status, error);
        },
      });
    });

    $("#loademplyrcontributionsaveBtn").click(function () {
      let start = $("#startpd").val();
      let end = $("#endpd").val();
      loadEmployerContributionTable(start, end);
    });

    function loadEmployerContributionTable(start, end) {
      swal({
        title: "Loading 13th Month",
        allowOutsideClick: false,
        onBeforeOpen: () => {
          swal.showLoading();
        },
      });
      $("#dataTableEmployee13thMonth").DataTable({
        destroy: true,
        processing: true,
        serverSide: true,
        paging: false,
        searching: false,
        info: false,
        scrollY: 600,
        scrollCollapse: true,
        serverMethod: "POST",
        ajax: {
          url: "/generate13thmonth/load",
          data: {
            startpayrolldate: start,
            endpayrolldate: end,
          },
          dataSrc: (json) => {
            var finalData = [];
            var data = json.data;

            console.log(data);
            $.each(data, (key, item) => {
              var action = "";
              var status = item.status;

              action = `<button id="viewBtn" class="btn text-primary" name="viewBtn" data-bs-toggle="modal" data-bs-target="#viewdetails"><i class="fas fa-fw fa-pen"></i></button>`;

              finalData.push({
                employeeid: item.employeeid,
                fullname: item.fullname,
                start_date: item.start_date,
                end_date: item.end_date,
                accrued13thmonth: item.accrued13thmonth,
                action: action,
              });
              console.log(finalData);
            });
            return finalData;
          },
        },
        columnDefs: [
          {
            targets: 1,
            className: "td-indent",
          },
        ],
        columns: [
          { data: "employeeid" },
          { data: "fullname" },
          { data: "start_date" },
          { data: "end_date" },
          {
            data: "accrued13thmonth",
            render: function (data, type, row) {
              return (
                "â‚±" +
                parseFloat(data).toLocaleString("en-US", {
                  minimumFractionDigits: 2,
                  maximumFractionDigits: 2,
                })
              );
            },
          },
          { data: "action" },
        ],
        createdRow: function (row, data, dataIndex) {
          $("td", row).each(function (index) {
            this.style.textAlign = "center";
            this.style.verticalAlign = "middle";
          });
        },
        initComplete: function () {
          console.log("Done");
          swal.close();
        },
      });
    }

    // $(document).on("click", "#generate13thmonthsaveBtn", function () {
    //   let YearDate = $("#genyear").val();

    //   var message = "";

    //   if (YearDate === "") {
    //     message += "Year Date is required. ";
    //   }

    //   if (message !== "") {
    //     swal("Validation Error", message, "error");
    //   } else {
    //     $.ajax({
    //       type: "POST",
    //       url: "/generate13thmonth/gen13thmonth",
    //       data: {
    //        year: YearDate,
    //       },
    //       success: function (result) {
    //         if (result.msg == "success") {
    //           swal({
    //             title: "Update Successfully",
    //             text: "You clicked the button!",
    //             icon: "success",
    //             button: "OK!",
    //           }).then((results) => {
    //             window.location.reload();
    //           });
    //           loadEmployerContributionTable(YearDate);
    //         } else if (result.msg == "exist") {
    //           swal({
    //             title: "Exist",
    //             text: "Data already exists!",
    //             icon: "warning",
    //             button: "OK!",
    //           });
    //         } else {
    //           swal(
    //             "Data already exists!",
    //             "You clicked the button!",
    //             "warning"
    //           );
    //         }
    //       },
    //       error: function (err) {
    //         swal("Error", "An error occurred while saving data.", "error");
    //       },
    //     });
    //   }
    // });

    $("#dataTableEmployee13thMonth tbody").on("click", "tr", function () {
      var dataRow = [];
      $(this)
        .closest("tr")
        .find("td")
        .each(function () {
          dataRow.push($(this).text());
        });
      console.log(dataRow);
      employeeid = dataRow[0];
      startpayrolldate = dataRow[2];
      endpayrolldate = dataRow[3];
    });

    $(document).on("click", "#viewBtn", function () {
      $("#dataTable13thMonthDetails").find("tr:gt(0)").remove();

      $.ajax({
        type: "POST",
        url: "/generate13thmonth/viewdetailsprfile",
        data: {
          employeeid: employeeid,
          startpayrolldate: startpayrolldate,
          endpayrolldate: endpayrolldate,
        },
        success: function (result) {
          if (result.msg === "success") {
            const existingData = result.data;

            $.each(existingData, (key, item) => {
              $("#preview").attr("src", "data:image/jpg;base64," + item.image);
              $("#13thmonthemployeeid").text(item.employeeid);
              $("#13thmonthfullname").text(item.fullname);
              $("#13thmonthpresent").text(item.present);
              $("#13thmonthabsent").text(item.absent);
              $("#13thmonthlateminutes").text(item.late_minutes);
              $("#13thmonthlatehours").text(item.late_hours);
              $("#totalretropaydiff").text(
                formatCurrencyValue(item.totalaccrued)
              );
            });
          } else {
            swal("Error fetching employee data", message, "error");
          }
        },
        error: function (err) {
          swal(
            "An error occurred while fetching employee data",
            message,
            "error"
          );
        },
      });
      $.ajax({
        type: "POST",
        url: "/generate13thmonth/viewdetails",
        data: {
          employeeid: employeeid,
          startpayrolldate: startpayrolldate,
          endpayrolldate: endpayrolldate,
        },
        success: function (result) {
          if (result.msg === "success") {
            const existingData = result.data;
            var material_list_tbl = $("#dataTable13thMonthDetails").DataTable();
            material_list_tbl.clear().draw();

            $.each(existingData, function (key, item) {
              var rowNode = material_list_tbl.row
                .add([
                  formatDate(item.payrolldate),
                  formatCurrencyValue(item.overall_netpay),
                  formatCurrencyValue(item.total_deductions),
                  formatCurrencyValue(item.total_netpay),
                  formatCurrencyValue(item.accrued13thmonth),
                ])
                .draw()
                .node();

              $(rowNode).find("td").css({
                "text-align": "center",
                "vertical-align": "middle",
              });
            });
          } else {
            swal("Error fetching");
          }
        },
        error: function (xhr, status, error) {
          console.error(xhr, status, error);
        },
      });
    });

    //#region function
    $(document).on("change", "#editemployeeprofile", function (e) {
      const input = document.getElementById("editemployeeprofile");
      const file = input.files[0];

      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onloadend = function () {
        const preview = document.getElementById("editpreview");
        preview.src = reader.result;
      };
      editimage();
    });

    function editimage() {
      const input = document.getElementById("editemployeeprofile");
      const file = input.files[0];

      var reader = new FileReader();
      console.log("next");

      reader.onload = function () {
        base64String = reader.result.replace("data:", "").replace(/^.+,/, "");

        imageBase64Stringsep = base64String;

        console.log(base64String);
      };
      reader.readAsDataURL(file);
    }

    function convertCurrencyToWords(currency) {
      const parts = currency.split(".");
      const integerPart = parseInt(parts[0].replace(",", ""));
      const decimalPart = parseInt(parts[1] || 0);

      let words = convertToWords(integerPart);
      words += " pesos";

      if (decimalPart > 0) {
        words += " and " + convertToWords(decimalPart) + " centavos";
      }

      return words;
    }

    function searchTable() {
      var input, filter, found, table, tr, td, i, j;
      input = document.getElementById("myInput");
      filter = input.value.toUpperCase();
      table = document.getElementById("dataTableEmployee13thMonth");
      tr = table.getElementsByTagName("tr");

      for (i = 1; i < tr.length; i++) {
        td = tr[i].getElementsByTagName("td");
        found = false;

        for (j = 0; j < td.length; j++) {
          if (td[j].innerHTML.toUpperCase().indexOf(filter) > -1) {
            found = true;
            break;
          }
        }

        if (found) {
          tr[i].style.display = "";
        } else {
          tr[i].style.display = "none";
        }
      }
    }
    //#endregion
  });
</script>
