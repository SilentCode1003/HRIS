<script>
  $(document).ready(function () {
    let userLocation = "";
    let ojtid = "<%= ojtid %>";
    let departmentid = "<%= departmentid %>";
    let devicein = "";
    let deviceout = "";
    let bdaydiv = "";
    let anouncementdiv = "";
    let geofenceid = "";
    let isgeofence = false;
    LoadTable();
    LoadBdayFolks();
    GenerateAnouncement();

    console.log("department", departmentid);

    const map = L.map("map").setView([14.338169350273253, 121.06126070315966], 15);

    L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
      attribution: "Â© OpenStreetMap contributors",
    }).addTo(map);

    // let geofencesettings = [];
    let geofences = [];

    $.ajax({
      type: "POST",
      url: "/geofencesettings/departmentgefence",
      data: {
        departmentid: departmentid,
      },
      success: function (result) {
        let data = result.data;
        console.log(data);
        data.forEach((item) => {
          const geofence = L.circle([item.latitude, item.longitude], {
            color: "red",
            fillColor: "#f03",
            fillOpacity: 0.3,
            radius: item.radius,
            geofenceid: item.geofenceid,
            departmentid: item.departmentid,
          }).addTo(map);
          geofences.push(geofence);
          geofencesettings.push({
              geofenceid: item.geofenceid,
              latitude: item.latitude,
              longitude: item.longitude,
              radius: item.rad
          });
        });

        validateUserLocation();
      },
      error: function (error) {
        console.error("Error loading geofences:", error);
      },
    });

    function checkGeofence(userLocation) {
      const userLatLng = L.latLng(userLocation.lat, userLocation.lng);

      for (const geofence of geofences) {
        const geofenceLatLng = geofence.getLatLng();
        const distance = userLatLng.distanceTo(geofenceLatLng);

        if (distance <= geofence.getRadius()) {
          console.log("Geofence ID:", geofence.options.geofenceid);
          console.log("true");
          geofenceid = geofence.options.geofenceid;
          return true;
        }
      }
      console.log("false");
      return false;
    }

    function updateLocationOnMap(position) {
      // userLocation = {
      //   lat: position.coords.latitude,
      //   lng: position.coords.longitude,
      // };

      // map.eachLayer((layer) => {
      //   if (layer instanceof L.Marker) {
      //     layer.remove();
      //   }
      // });

      // const userMarker = L.marker([userLocation.lat, userLocation.lng]).addTo(
      //   map
      // );
      // userMarker.bindPopup(`My Location`).openPopup();
      // const geofenceButtonClockIn = document.getElementById("clockinbtn");
      // const geofenceButtonClockOut = document.getElementById("clockoutbtn");

      // if (checkGeofence(userLocation)) {
      //   swal(
      //     "You are inside the geofence!",
      //     "You clicked the clockin button!",
      //     "success"
      //   );
      //   console.log("User is inside the geofence.");
      //   geofenceButtonClockIn.style.display = "block";
      //   geofenceButtonClockOut.style.display = "block";
      // } else {
      //   swal(
      //     "You are outside the geofence!",
      //     "You clicked the clockin button!",
      //     "warning"
      //   );
      //   console.log("User is outside the geofence.");
      //   geofenceButtonClockIn.style.display = "none";
      //   geofenceButtonClockOut.style.display = "none";
      // }


      userLocation = {
        lat: position.coords.latitude,
        lng: position.coords.longitude,
      };

      const geocodeURL = `https://nominatim.openstreetmap.org/reverse?lat=${userLocation.lat}&lon=${userLocation.lng}&format=json&addressdetails=1`;

      $.getJSON(geocodeURL, function (data) {
        userLocationName = data.display_name;
        console.log("Fetched detailed address:", userLocationName);

        const userMarker = L.marker([userLocation.lat, userLocation.lng]).addTo(
          map
        );
        userMarker.bindPopup(`My Location: ${userLocationName}`).openPopup();
      })
        .done(function () {})
        .fail(function (jqxhr, textStatus, error) {
          const err = textStatus + ", " + error;
          console.error("Error fetching location:", err);
        });

      map.eachLayer((layer) => {
        if (layer instanceof L.Marker) {
          layer.remove();
        }
      });

      const userMarker = L.marker([userLocation.lat, userLocation.lng]).addTo(
        map
      );
      userMarker.bindPopup("My Location").openPopup();

      const geofenceButtonClockIn = document.getElementById("clockinbtn");
      const geofenceButtonClockOut = document.getElementById("clockoutbtn");

      if (isgeofence) {
        if (checkGeofence(userLocation)) {
          swal(
            "You are inside the geofence!",
            "You clicked the clockin button!",
            "success"
          );
          console.log("User is inside the geofence.");
          geofenceButtonClockIn.style.display = "block";
          geofenceButtonClockOut.style.display = "block";
        } else {
          swal(
            "You are outside the geofence!",
            "You clicked the clockin button!",
            "warning"
          );
          console.log("User is outside the geofence.");
          geofenceButtonClockIn.style.display = "none";
          geofenceButtonClockOut.style.display = "none";
        }
      } else {
        geofenceButtonClockIn.style.display = "block";
        geofenceButtonClockOut.style.display = "block";
      }
    }

    function handleError(error) {
      console.error(`Error getting user location: ${error.message}`);
    }

    function validateUserLocation() {
      if ("geolocation" in navigator) {
        navigator.geolocation.getCurrentPosition(
          updateLocationOnMap,
          handleError,
          { enableHighAccuracy: true, maximumAge: 10000, timeout: 1000 }
        );
      } else {
        console.error("Geolocation is not supported on this device.");
      }
    }

    //#region buttons

    $("#clockinbtn").on("click", function () {
      swal({
        title: "Confirm Clock-in",
        text: "Are you sure you want to clock in?",
        icon: "info",
        buttons: ["Cancel", "Yes, Clock In"],
        dangerMode: false,
      }).then((proceed) => {
        if (proceed) {
          getDeviceInformation()
            .then((devicein) => {
              $.ajax({
                type: "POST",
                url: "/ojtindex/clockin",
                data: {
                  ojtid: ojtid,
                  latitude: userLocation.lat,
                  longitude: userLocation.lng,
                  devicein: devicein,
                  geofenceid: geofenceid,
                },
                success: function (response) {
                  if (response.msg === "exist") {
                    swal({
                      title: "Clock-in Warning",
                      text: "You have already clocked in today.",
                      icon: "warning",
                    });
                  } else if (response.status === "success") {
                    swal({
                      title: "Clock-in successful!",
                      icon: "success",
                    }).then(() => {});
                  } else {
                    swal({
                      title: "Clock-in failed",
                      text: response.message,
                      icon: "error",
                    });
                  }
                },
                error: function (xhr, status, error) {
                  swal({
                    title: "Error",
                    text: "Unable to clock in. Please try again.",
                    icon: "error",
                  });
                },
              });
            })
            .catch((error) => {
              console.error("Error getting device information:", error);
            });
        } else {
          swal("Clock-in Canceled", "", "info");
        }
      });
    });

    $("#clockoutbtn").on("click", function () {
      if (
        !userLocation ||
        typeof userLocation.lat === "undefined" ||
        typeof userLocation.lng === "undefined"
      ) {
        console.error("Error: userLocation is not defined or incomplete.");
        return;
      }
      swal({
        title: "Confirm Clock-out",
        text: "Are you sure you want to clock out?",
        icon: "info",
        buttons: ["Cancel", "Yes, Clock Out"],
        dangerMode: false,
      }).then((proceed) => {
        if (proceed) {
          $.ajax({
            type: "POST",
            url: "/ojtindex/clockout",
            data: {
              ojtid: ojtid,
              latitude: userLocation.lat,
              longitude: userLocation.lng,
              deviceout: deviceout,
              geofenceid: geofenceid,
            },

            success: function (response) {
              if (response.msg === "exist") {
                swal({
                  title: "Clock-in Warning",
                  text: "You have already clocked in today.",
                  icon: "warning",
                });
              } else if (response.status === "success") {
                swal({
                  title: "Clock-out successful!",
                  icon: "success",
                }).then(() => {});
              } else {
                swal({
                  title: "Clock-in failed",
                  text: response.message,
                  icon: "error",
                });
              }
            },
            error: function (xhr, status, error) {
              swal({
                title: "Error",
                text: "Unable to clock out. Please try again.",
                icon: "error",
              });
            },
          });
        } else {
          swal("Clock-out Canceled", "", "info");
        }
      });
    });

    //#endregion

    //#region tables
    function LoadTable() {
      $("#attendanceTable").DataTable({
        destroy: true,
        processing: true,
        serverSide: true,
        paging: false,
        searching: false,
        info: false,
        scrollY: 600,
        scrollCollapse: true,
        serverMethod: "POST",
        ajax: {
          url: "/ojtindex/emplogs",
          data: {
            ojtid: ojtid,
          },
          dataSrc: (json) => {
            var finalData = [];
            var data = json.data;
            $.each(data, (key, item) => {
              finalData.push({
                logdate: item.logdate,
                logtype: item.logtype,
                logtime: item.logtime,
              });
            });

            return finalData;
          },
        },
        columnDefs: [
          {
            targets: 1,
            className: "td-indent",
          },
        ],
        columns: [
          { data: "logdate" },
          { data: "logtype" },
          { data: "logtime" },
        ],
        createdRow: function (row, data, dataIndex) {
          $("td", row).each(function (index) {
            // this.style.textAlign = "center";
            // this.style.verticalAlign = "middle";
            $(this).css({
              //miyaka
              "text-align": "center",
              "vertical-align": "middle",
              "background-color": "white",
              color: "#7a1818",
              "font-weight": "bold",
            });
          });

          //miyaka
          $("td:nth-child(2)", row).each(function () {
            if (data.logtype === "ClockIn") {
              $(this).html(
                "<span class='clockin-btn'>" + $(this).text() + "</span>"
              );
            } else if (data.logtype === "ClockOut") {
              $(this).html(
                "<span class='clockout-btn'>" + $(this).text() + "</span>"
              );
            }
          });
        },
        initComplete: function () {},
      });
    }

    function LoadBdayFolks() {
      $.ajax({
        type: "GET",
        url: "/getbdaytoday",
        success: function (result) {
          if (result.msg === "success") {
            const bdayData = result.data;
            let counterbday = 0;
            let bdaydiv = "";

            if (bdayData.length === 0) {
              bdaydiv = `<div class="carousel-item active">
                                    <img src="/images/img/nobday.jpg" class="d-block w-100 nobday-img" alt="Default Image">
                                    <div class="carousel-caption d-md-block">
                                        <h1 class="no-text">NO</h1>
                                          <h1 class="nobday">Birthdays for today ...</h1>
                                    </div>
                                </div>`;
            } else {
              $.each(bdayData, (key, item) => {
                counterbday++;
                bdaydiv += `<div class="carousel-item active" data-bs-interval="5000">


                               <div class="bday-eportal">
                                 <img id="preview${counterbday}" src="data:image/jpg;base64,${item.profilePicturePath}" class="d-flex bday-img-eportal rounded-circle" alt="...">
                               <p class="bday-greet">Happy Birthday</p>
                                   <h5 id="employeeid${counterbday}" class="fname-eportal">${item.firstname}</h5>
                                   <h6 id="bdaydate${counterbday}" class="bdaydate-eportal">${item.birthday}</h6>

                               <button class="carousel-control-prev" type="button"
                                   data-bs-target="#carouselannouncement" data-bs-slide="prev">
                                   <i class='bx bxs-left-arrow prev-hrmis' aria-hidden="true"></i>
                                   <span class="visually-hidden">Previous</span>
                               </button>
                               <button class="carousel-control-next" type="button"
                                   data-bs-target="#carouselannouncement" data-bs-slide="next">
                                   <i class='bx bxs-right-arrow next-hrmis' aria-hidden="true"></i>
                                   <span class="visually-hidden">Next</span>
                               </button>
                             </div>
                           </div>`;
              });
            }

            $("#carouselbday").html(bdaydiv);
          } else {
            console.error("Error: ", result.message);
            swal(
              "An error occurred while fetching announcement data",
              "Please try again later.",
              "error"
            );
          }
        },
      });
    }

    function GenerateAnouncement() {
      $.ajax({
        type: "GET",
        url: "/getbulletin",
        // data: {
        //   bulletinid: id,
        // },
        success: function (result) {
          if (result.msg === "success") {
            const announcementData = result.data;
            let counter = 0;
            $.each(announcementData, (key, item) => {
              counter++;
              anouncementdiv += `<div class="carousel-item active" data-bs-interval="3000">
                                    <img id="preview${counter}" src="data:image/jpg;base64,${item.image}"
                                     class="d-block w-100 eportal-img-announce" alt="...">


                                <div class="announcement-hrmis">
                                    <h6 id="announcedate${counter}" class="a-date">${item.targetdate}</h6>
                                    <h6 id="announcetitle${counter}" class="announce-title">${item.title}</h6>
                                    <p id="announcedesc${counter}" class="a-des">${item.description}</p>
                                <button class="carousel-control-prev" type="button"
                                    data-bs-target="#carouselannouncement" data-bs-slide="prev">
                                    <i class='bx bxs-left-arrow prev-hrmis' aria-hidden="true"></i>
                                    <span class="visually-hidden">Previous</span>
                                </button>
                                <button class="carousel-control-next" type="button"
                                    data-bs-target="#carouselannouncement" data-bs-slide="next">
                                    <i class='bx bxs-right-arrow next-hrmis' aria-hidden="true"></i>
                                    <span class="visually-hidden">Next</span>
                                </button>
                                </div>
                                </div>`;
            });
          } else {
            console.error("Error: ", result.message);
            swal(
              "An error occurred while fetching announcement data",
              "Please try again later.",
              "error"
            );
          }

          $("#carouselannouncement").html(anouncementdiv);
        },
        error: function (err) {
          console.error("AJAX Error: ", err.responseText);
          swal(
            "An error occurred while fetching announcement data",
            "Please try again later.",
            "error"
          );
        },
      });
    }

    //#endregion
  });
</script>
