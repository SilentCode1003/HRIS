<!-- LOADER -->
<!-- <div class="loader-wrapper">
  <div class="spinner"></div>
</div> -->
<!-- LOADER -->
<!-- <div class="loader-wrapper">
  <span class="loader"><span class="loader-inner"></span></span>
</div> -->

<!-- Logout Modal-->
<div
  class="modal fade"
  id="logoutModal"
  tabindex="-1"
  role="dialog"
  aria-labelledby="exampleModalLabel"
  aria-hidden="true"
>
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header logout-header">
        <h6 class="modal-title fs-5" id="exampleModalLabel">
          <b>Ready to leave?</b>
        </h6>
        <!-- <button class="close" type="button" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">×</span>
        </button> -->
        <i class="bx bx-x" data-dismiss="modal" aria-label="CLose"></i>
      </div>
      <div class="modal-body logout-body">
        <h5>
          Click <span class="btn-out-body">Log Out</span>  below when you're ready to end your session.
        </h5>
      </div>
      <div class="modal-footer logout-footer">
        <button
          class="btn btn-logout-cancel"
          type="button"
          data-dismiss="modal"
        >
          Cancel
        </button>
        <button class="btn btn-logout" id="logoutBtn" name="logoutBtn">
          Log Out
        </button>
      </div>
    </div>
  </div>
</div>
<!--Core bootstrap-->
<script src="/vendor/jquery/jquery.min.js"></script>
<script src="/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

<!-- Core plugin JavaScript-->
<script src="/vendor/jquery-easing/jquery.easing.min.js"></script>
<!-- <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script> -->

<!-- Custom scripts for all pages-->
<!-- <script src="/javascripts/js/sb-admin-2.js"></script> -->
<!-- <script src="/javascripts/js/sb-admin-2.js"></script> -->
<script src="/javascripts/js/sb-admin-2.min.js"></script>

<!-- PCreated by level plugins -->
<script src="/vendor/datatables/jquery.dataTables.min.js"></script>
<script src="/vendor/datatables/dataTables.bootstrap4.min.js"></script>
<!-- <script src="/vendor/chart.js/Chart.min.js"></script> -->

<!-- PCreated by level custom scripts -->
<!-- <script src="/javascripts/javascripts/js/demo/datatables-demo.js"></script>
<script src="/javascripts/js/demo/chart-area-demo.js"></script>
<script src="/javascripts/js/demo/chart-pie-demo.js"></script> -->

<!-- swal-->
<script src="/javascripts/js/sweetalert.min.js"></script>
<!-- Toastr-->
<script src="javascripts/js/toastr.min.js"></script>

<script src="/javascripts/js/scripts.js"></script>

<!-- XLSX -->
<script src="/javascripts/js/xlsx.mini.min.js"></script>

<!-- Page level custom scripts -->
<!-- <script src="/javascripts/js/demo/datatables-demo.js"></script> -->
<!-- <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" crossorigin="anonymous"></script> -->

<!-- google map -->
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<!-- Leaflet CSS and JS -->

<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

<!-- Summernote -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.18/summernote-bs4.min.js"></script>

<!--Date Picker-->
<script
  type="text/javascript"
  src="https://cdn.jsdelivr.net/momentjs/latest/moment.min.js"
></script>
<script
  type="text/javascript"
  src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"
></script>

<!--PDF DOWNLOADER-->
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.68/pdfmake.min.js"></script>

<!-- Toastr -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"></script>

<script>
  // document.addEventListener("contextmenu", function (event) {
  //   event.preventDefault();
  // });

  // document.onkeydown = function (e) {
  //   if (
  //     e.key === "F12" ||
  //     (e.ctrlKey &&
  //       e.shiftKey &&
  //       (e.key === "I" || e.key === "J" || e.key === "C")) ||
  //     (e.ctrlKey && e.key === "U")
  //   ) {
  //     e.preventDefault();
  //     return false;
  //   }
  // };
  $(document).on("click", "#logoutBtn", function () {
    $.ajax({
      type: "POST",
      url: "/logout",
      success: function (result) {
        swal({
          title: "Ba Bye!!!",
          text: "Log out Successfully",
          icon: "success",
          button: "Ba bye!!",
        }).then((results) => {
          window.location.reload();
          location.replace("/");
        });
      },
      error: function (err) {
        errormsg(err);
      },
    });
  });

  $(document).on("click", "#logoutOjtBtn", function () {
    $.ajax({
      type: "POST",
      url: "/ojtlogin/logout",
      success: function (result) {
        swal({
          title: "Ba Bye!!!",
          text: "Log out Successfully",
          icon: "success",
          button: "Ba bye!!",
        }).then((results) => {
          window.location.reload();
          location.replace("/");
        });
      },
      error: function (err) {
        errormsg(err);
      },
    });
  });
  function adjustTextareaHeight(textarea) {
    textarea.style.height = "auto";
    textarea.style.height = textarea.scrollHeight + "px";
  }
  function formatPrice(event, input) {
    event.preventDefault();

    const cursorPosition = input.selectionStart;
    const originalValue = input.value;
    const defaultValue = "₱0.00";
    const currentValue = originalValue || defaultValue;

    let value = currentValue.replace(/[^0-9.]/g, "");
    let number = parseFloat(value);

    if (!isNaN(number)) {
      const formattedValue = number.toLocaleString("en-PH", {
        style: "currency",
        currency: "PHP",
        minimumFractionDigits: 2,
        maximumFractionDigits: 2,
      });

      input.value = formattedValue;

      let newPosition =
        cursorPosition +
        (formattedValue.indexOf(".") > currentValue.indexOf(".") ? 1 : 0);

      // Set the new cursor position
      input.setSelectionRange(newPosition, newPosition);
    } else {
      input.value = defaultValue;
    }
  }
  // hidespinner();
  function showspinner() {
    console.log("show loader");
    $(".loader-wrapper").show();
  }

  function hidespinner() {
    console.log("hide loader");
    setTimeout(() => {
      $(".loader-wrapper").hide();
    }, 1000);
  }

  function showSweetAlert(title, text, icon, buttonText) {
    swal({
      title: title,
      text: text,
      icon: icon,
      button: buttonText,
    });
  }

  function getDeviceInformation() {
    return new Promise((resolve, reject) => {
      if (typeof navigator !== "undefined") {
        resolve(navigator.userAgent || "web");
      } else {
        reject(new Error("Navigator object not available."));
      }
    });
  }

  function formatToCurrency(value) {
    return (
      "₱" +
      parseFloat(value).toLocaleString("en-US", {
        minimumFractionDigits: 2,
        maximumFractionDigits: 2,
      })
    );
  }

  function formatCurrencyValue(amount) {
    var formattedAmount = new Intl.NumberFormat("en-PH", {
      style: "currency",
      currency: "PHP",
    }).format(amount);
    return formattedAmount;
  }

  function formatDate(dateString) {
    const date = new Date(dateString);
    const year = date.getFullYear();
    let month = (date.getMonth() + 1).toString().padStart(2, "0");
    let day = date.getDate().toString().padStart(2, "0");
    return `${year}-${month}-${day}`;
  }

  function formatDateTime(dateTime) {
    const formattedDateTime = moment(dateTime).format("YYYY-MM-DD HH:mm:ss");
    return formattedDateTime;
  }

  function formatTime(dateTimeString) {
    if (!dateTimeString) return "";
    const dateTimeParts = dateTimeString.split("T");
    if (dateTimeParts.length !== 2) return "";
    const timeString = dateTimeParts[1];
    const timeParts = timeString.split(":");
    if (timeParts.length !== 2) return "";
    const hours = timeParts[0];
    const minutes = timeParts[1];
    return `${hours}:${minutes}`;
  }

  //import TABLE TO EXCEL function
  function exportTableToExcel(tableID, filename = "", callback) {
    let table = document.getElementById(tableID);
    let wb = XLSX.utils.table_to_book(table, { sheet: "Sheet1" });
    let ws = wb.Sheets["Sheet1"];
    let range = XLSX.utils.decode_range(ws["!ref"]);
    for (let C = range.s.c; C <= range.e.c; ++C) {
      let address = XLSX.utils.encode_cell({ c: C, r: 1 });
      if (!ws[address]) continue;
      ws[address].s = {
        font: {
          bold: true,
        },
      };
    }

    // Set column widths
    ws["!cols"] = [
      { wpx: 200 }, // A
      { wpx: 220 }, // B
      { wpx: 200 }, // C
      { wpx: 200 }, // D
      { wpx: 200 }, // E
      { wpx: 220 }, // F
    ];

    let wbout = XLSX.write(wb, { bookType: "xlsx", type: "binary" });

    function s2ab(s) {
      var buf = new ArrayBuffer(s.length); //convert s to arrayBuffer
      var view = new Uint8Array(buf); //create uint8array as viewer
      for (var i = 0; i < s.length; i++) view[i] = s.charCodeAt(i) & 0xff; //convert to octet
      return buf;
    }

    let blob = new Blob([s2ab(wbout)], { type: "application/octet-stream" });

    saveAs(blob, filename);

    if (callback && typeof callback === "function") {
      callback();
    }
  }

  // $("#sidebarToggleTop").on("click", function (e) {
  //   $(".navbar").toggleClass("navbar-toggled");
  // });

  //   $(document).ready(function () {
  //   let isSidebarOpen = localStorage.getItem('isSidebarOpen') === 'true';

  //   function updateSidebarState() {
  //     $("body").toggleClass("sidebar-toggled", isSidebarOpen);
  //     $(".sidebar").toggleClass("toggled", isSidebarOpen);

  //     if (isSidebarOpen) {
  //       $('.sidebar .collapse').collapse('hide');
  //       $('#content').toggleClass('content-toggled');
  //       $('.sticky-footer').toggleClass('footer-toggled');
  //     } else {
  //       $('#content').removeClass('content-toggled');
  //       $('.navbar').removeClass('navbar-toggled');
  //       $('.sticky-footer').removeClass('footer-toggled');
  //     }
  //   }

  //   updateSidebarState();

  //   $("#sidebarToggle", "#sidebarToggleTop").on('click', function (e) {
  //     isSidebarOpen = !isSidebarOpen;

  //     localStorage.setItem('isSidebarOpen', isSidebarOpen);

  //     updateSidebarState();
  //   });
  // });

  function toggleSidebarAndNavbar() {
  // Check if the sidebar is currently toggled
  const isSidebarToggled = $(".sidebar").hasClass("toggled");

  if (isSidebarToggled) {
    // Sidebar is currently hidden, so show it
    $("body").removeClass("sidebar-toggled");
    $(".sidebar").removeClass("toggled");
    $("#accordionSidebar").removeClass("toggled");
    $(".navbar").removeClass("navbar-toggled"); // Reset navbar width
    $(".content").removeClass("content-toggled"); // Adjust content width
    $(".navbar").css("width", "calc(100% - 6.5rem)"); // Adjust navbar width for sidebar
  } else {
    // Sidebar is currently visible, so hide it
    $("body").addClass("sidebar-toggled");
    $(".sidebar").addClass("toggled");
    $("#accordionSidebar").addClass("toggled");
    $(".navbar").addClass("navbar-toggled");
    $(".content").addClass("content-toggled");
    $(".navbar").css("width", "100%"); // Set navbar to full width
  }
}

$(document).ready(function () {
  // Attach event listener to the toggle button
  $("#sidebarToggleTop").on("click", function () {
    toggleSidebarAndNavbar();
  });
});


  //#region  Alerts

  function success(title, text) {
    toastr.success(text, title, {
      closeButton: false,
      debug: false,
      newestOnTop: true,
      progressBar: true,
      positionClass: "toast-top-right",
      preventDuplicates: false,
      onclick: null,
      showDuration: "300",
      hideDuration: "1000",
      timeOut: "5000",
      extendedTimeOut: "1000",
      showEasing: "swing",
      hideEasing: "linear",
      showMethod: "fadeIn",
      hideMethod: "fadeOut",
    });
  }
  function info(title, message) {
    swal({
      title: title,
      text: message,
      icon: "info",
      button: "OK!",
    });
  }
  function warning(title, text) {
    console.log(text);

    toastr.warning(text, title, {
      closeButton: false,
      debug: false,
      newestOnTop: true,
      progressBar: true,
      positionClass: "toast-top-right",
      preventDuplicates: false,
      onclick: null,
      showDuration: "300",
      hideDuration: "1000",
      timeOut: "5000",
      extendedTimeOut: "1000",
      showEasing: "swing",
      hideEasing: "linear",
      showMethod: "fadeIn",
      hideMethod: "hide",
    });
  }
  function errormsg(message) {
    swal({
      title: "Error",
      text: message,
      icon: "error",
      button: "OK!",
    });
  }
  function Loading(title) {
    toastr.info(
      `<strong>${title}</strong> <br>
        <div style="text-align: center; margin-top: 5px;">
          <div class="spinner-border" role="status" style="display: inline-block;">
            <span class="sr-only">Loading...</span>
          </div>
        </div>`,
      null, // No title for the notification itself
      {
        closeButton: false,
        debug: false,
        newestOnTop: true,
        progressBar: false,
        positionClass: "toast-top-right",
        preventDuplicates: true,
        onclick: null,
        showDuration: "300",
        hideDuration: "0", // Set to 0 to make it indefinite until manually cleared
        timeOut: "0", // Set to 0 to make it indefinite until manually cleared
        extendedTimeOut: "0", // Set to 0 to make it indefinite until manually cleared
        showEasing: "swing",
        hideEasing: "linear",
        showMethod: "fadeIn",
        hideMethod: "hide",
      }
    );
  }

  function hideLoading() {
    toastr.clear();
    console.log("Toastr Cleared!");
  }
  //#endregion

  //#region Dropdown
  function AddDropdownData(dropdownID, activeData, inputID, hiddenID) {
    for (const data of activeData) {
      AddOption(dropdownID, data.display, data.value, inputID, hiddenID);
    }
  }

  function AddOption(dropdownID, displayText, actualValue, inputID, hiddenID) {
    const dropdownElement = document.getElementById(dropdownID);
    const hiddenInput = document.getElementById(hiddenID);

    const newOption = document.createElement("div");
    newOption.className = "dropdown-option";
    newOption.textContent = displayText;
    newOption.setAttribute("data-value", actualValue);

    newOption.addEventListener("click", function () {
      const inputElement = document.getElementById(inputID);
      inputElement.value = displayText;
      hiddenInput.value = actualValue;
      dropdownElement.style.display = "none";
    });

    dropdownElement.appendChild(newOption);

    SetupDropdown(inputID, dropdownID, "dropdown-option");
  }

  function SetupDropdown(inputId, dropdownId, optionClass) {
    const inputElement = document.getElementById(inputId);
    const dropdownElement = document.getElementById(dropdownId);
    const options = dropdownElement.getElementsByClassName(optionClass);

    inputElement.addEventListener("click", function () {
      dropdownElement.style.display = "block";
    });

    for (const option of options) {
      option.addEventListener("click", function () {
        inputElement.value = option.textContent;
        const actualValue = option.getAttribute("data-value");
        inputElement.setAttribute("data-actual-value", actualValue);
        dropdownElement.style.display = "none";
      });
    }

    inputElement.addEventListener("input", function () {
      const value = inputElement.value.toUpperCase();
      for (const option of options) {
        if (option.textContent.toUpperCase().includes(value)) {
          option.style.display = "block";
        } else {
          option.style.display = "none";
        }
      }
      dropdownElement.style.display = "block";
    });

    document.addEventListener("click", function (event) {
      const target = event.target;
      if (!dropdownElement.contains(target) && target !== inputElement) {
        dropdownElement.style.display = "none";
      }
    });
  }
  //#endregion

  //#region Search Table
  function filterTableRows(tablename, colcount, searchid) {
    // console.log("triggered search");

    const searchQuery = $(searchid).val().trim().toLowerCase();
    let foundMatches = false;

    $("#no-match-row").remove();

    $(tablename + " tbody tr").each(function () {
      const rowData = $(this).text().toLowerCase();
      if (rowData.includes(searchQuery)) {
        $(this).show();
        foundMatches = true;
      } else {
        $(this).hide();
      }
    });

    if (!foundMatches) {
      const noMatchRow = $("<tr>").append(
        $("<td>", {
          colspan: colcount,
          class: "text-center",
          text: "No Data Matched",
        })
      );
      $(tablename + " tbody").append(noMatchRow);
      noMatchRow.attr("id", "no-match-row");
    }
  }
  //#endregion

  //#region Card Body Show
  const toggleButton = document.getElementById("toggleButton");
  const toggleView = document.querySelector(".toggle-view");
  let isOpen = false;
  if (toggleButton != null && toggleView != null) {
    toggleButton.addEventListener("click", function () {
      if (!isOpen) {
        toggleView.style.display = "block";
        toggleView.style.height = toggleView.scrollHeight + "px";
        toggleButton.innerHTML = '<i class="fas fa-chevron-up"></i>';
      } else {
        toggleView.style.height = "0";
        setTimeout(() => {
          toggleView.style.display = "none";
        }, 500);
        toggleButton.innerHTML = '<i class="fas fa-plus"></i>';
      }

      isOpen = !isOpen;
    });
  }
  //#endregion

  //#region Status backgrounds
  function getStatusBackground(status) {
    switch (status) {
      case "REQUEST":
        return "status-pending";
      case "REFUNDED":
        return "status-pending";
      case "PENDING":
        return "status-pending";
      case "COMPLETED":
        return "status-success";
      case "SOLD":
        return "status-success";
      case "Active":
        return "status-success";
      case "APPROVED":
        return "status-success";
      case "REPLACE":
        return "status-inprogress";
      case "RETURN":
        return "status-inprogress";
      case "IN PROGRESS":
        return "status-inprogress";
      case "DAMAGE":
        return "status-warning";
      case "Inactive":
        return "status-warning";
      case "CANCELLED":
        return "status-warning";
      case "NOT COMPLETE":
        return "status-inprogress";
      default:
        return "";
    }
  }

  function getStatusContainerBackground(status) {
    switch (status) {
      case "PENDING":
        return "status-container-pd";
      case "REQUEST":
        return "status-container-pd";
      case "REFUNDED":
        return "status-container-pd";
      case "COMPLETED":
        return "status-container-sc";
      case "SOLD":
        return "status-container-sc";
      case "Active":
        return "status-container-sc";
      case "APPROVED":
        return "status-container-sc";
      case "REPLACE":
        return "status-container-inpg";
      case "RETURN":
        return "status-container-inpg";
      case "IN PROGRESS":
        return "status-container-inpg";
      case "DAMAGE":
        return "status-container-wr";
      case "Inactive":
        return "status-container-wr";
      case "CANCELLED":
        return "status-container-wr";
      case "COMPLETE":
        return "status-container-sc";
      default:
        return "";
    }
  }
  //#endregion

  //#region Toastr
  function successlogin(title, text) {
    return swal({
      title: title,
      text: text,
      icon: "success",
      buttons: {
        confirm: {
          text: "OK",
          value: true,
          visible: true,
          className: "swal-button-ok",
        },
      },
    }).then((result) => {
      return new Promise((resolve, reject) => {
        if (result === true) {
          resolve();
        } else {
          reject();
        }
      });
    });
  }

  function Loading(title) {
    toastr.info(
      `<strong>${title}</strong> <br>
        <div style="text-align: center; margin-top: 5px;">
          <div class="spinner-border" role="status" style="display: inline-block;">
            <span class="sr-only">Loading...</span>
          </div>
        </div>`,
      null,
      {
        closeButton: false,
        debug: false,
        newestOnTop: true,
        progressBar: false,
        positionClass: "toast-top-right",
        preventDuplicates: true,
        onclick: null,
        showDuration: "300",
        hideDuration: "0",
        timeOut: "0",
        extendedTimeOut: "0",
        showEasing: "swing",
        hideEasing: "linear",
        showMethod: "fadeIn",
        hideMethod: "hide",
      }
    );
  }

  function success(title, text) {
    toastr.success(text, title, {
      closeButton: false,
      debug: false,
      newestOnTop: true,
      progressBar: true,
      positionClass: "toast-top-right",
      preventDuplicates: true,
      onclick: null,
      showDuration: "300",
      hideDuration: "1000",
      timeOut: "5000",
      extendedTimeOut: "1000",
      showEasing: "swing",
      hideEasing: "linear",
      showMethod: "fadeIn",
      hideMethod: "fadeOut",
    });
  }

  function warning(title, text) {
    toastr.warning(text, title, {
      closeButton: false,
      debug: false,
      newestOnTop: true,
      progressBar: true,
      positionClass: "toast-top-right",
      preventDuplicates: true,
      onclick: null,
      showDuration: "300",
      hideDuration: "1000",
      timeOut: "5000",
      extendedTimeOut: "1000",
      showEasing: "swing",
      hideEasing: "linear",
      showMethod: "fadeIn",
      hideMethod: "fadeOut",
    });
  }

  function info(title, text) {
    toastr.info(text, title, {
      closeButton: false,
      debug: false,
      newestOnTop: true,
      progressBar: true,
      positionClass: "toast-top-right",
      preventDuplicates: true,
      onclick: null,
      showDuration: "300",
      hideDuration: "1000",
      timeOut: "5000",
      extendedTimeOut: "1000",
      showEasing: "swing",
      hideEasing: "linear",
      showMethod: "fadeIn",
      hideMethod: "fadeOut",
    });
  }

  function errormsg(err) {
    toastr.error(err, "Error!", {
      closeButton: false,
      debug: false,
      newestOnTop: true,
      progressBar: true,
      positionClass: "toast-top-right",
      preventDuplicates: true,
      onclick: null,
      showDuration: "300",
      hideDuration: "1000",
      timeOut: "5000",
      extendedTimeOut: "1000",
      showEasing: "swing",
      hideEasing: "linear",
      showMethod: "fadeIn",
      hideMethod: "fadeOut",
    });
  }
  //#endregion

  //#region Date Converter Month:Day:Year:HH:MM
  ConvertDate = (dateTimeString) => {
    const date = new Date(dateTimeString);

    const options = { month: "long", day: "numeric", year: "numeric" };
    const formattedDate = date.toLocaleDateString("en-US", options);

    let hours = date.getHours();
    const minutes = date.getMinutes();
    const ampm = hours >= 12 ? "PM" : "AM";
    hours = hours % 12;
    hours = hours ? hours : 12;
    const formattedTime = `${hours}:${
      minutes < 10 ? "0" : ""
    }${minutes} ${ampm}`;

    return `${formattedDate} - ${formattedTime}`;
  };
  //#endregion

  //#region AJAX CALLS
  //@use for updating/saving/inserting data
  Upsert = (type, url, data, callback) => {
    $.ajax({
      type: type,
      url: url,
      data: data,
      success: function (result) {
        callback(result);
      },
      error: function (err) {
        warning(
          "Error",
          "An error occurred while communicating with the server."
        );
      },
    });
  };

  //@use for fetching GET data
  Fetch = (url, callback) => {
    $.ajax({
      url: url,
      method: "GET",
      dataType: "json",
      success: function (result) {
        callback(result);
      },
      error: function (err) {
        warning(
          "Error",
          "An error occurred while communicating with the server."
        );
      },
    });
  };

  //@use for fetching data with progress bar
  FetchTableData = (url, callback) => {
    $(".progress").hide();
    $(".progress").slideDown();

    $.ajax({
      url: url,
      type: "GET",
      xhrFields: {
        onprogress: function (e) {
          if (e.lengthComputable) {
            let percentComplete = (e.loaded / e.total) * 100;
            $(".progress-bar").css("width", percentComplete + "%");
          }
        },
      },
      success: function (result) {
        setTimeout(function () {
          $(".progress").slideUp(function () {
            const data = result.data;
            if (result.msg === "success") {
              callback(data);
            } else {
              console.error(result.msg);
            }
          });
        }, 1000);
      },
      error: function (error) {
        warning(
          "Error",
          "An error occurred while communicating with the server."
        );
      },
    });
  };
  //#endregion

  //#region Ajax Utility
  const Query = (url, type, data = null) => {
    return new Promise((resolve, reject) => {
      let ajaxOptions = {
        url: url,
        method: type,
        dataType: "json",
        success: function (result) {
          resolve(result);
        },
        error: function (err) {
          reject(err);
          warning(
            "Error",
            "An error occurred while communicating with the server."
          );
        },
      };

      if (["PUT", "POST", "PATCH", "DELETE"].includes(type) && data) {
        ajaxOptions.data = JSON.stringify(data);
        ajaxOptions.contentType = "application/json";
      }

      $.ajax(ajaxOptions);
    });
  };

  const queryUtility = {
    async Load(url) {
      return await Query(url, "GET");
    },
    async Save(url, data) {
      return await Query(url, "POST", data);
    },
    async Update(url, data) {
      return await Query(url, "PUT", data);
    },
    async Delete(url, data) {
      return await Query(url, "DELETE", data);
    },
  };
  //#endregion

   //#region Sidebar
   $(document).ready(function () {
    if ($('.collapse-item.active').length > 0) {
        $('.collapse-item.active').closest('.collapse').addClass('show');
    }

    $('.collapse-item').click(function () {
        $('.collapse-item').removeClass('active');
        $(this).addClass('active');
    });

    var path = window.location.pathname;

    $('.collapse-item').each(function () {
        var href = $(this).attr('href');
        if (path === href) {
            $(this).addClass('active');
            $(this).closest('.collapse').addClass('show');
        }
    });

    function adjustCollapse() {
        if ($(window).width() <= 767) {
            $('.collapse').removeClass('show');
            $('.row.d-flex.justify-content-center.align-items-center').removeClass('login-height');
        } else {
            $('.collapse-item.active').closest('.collapse').addClass('show');
        }
    }
    adjustCollapse();

    $(window).resize(function () {
        adjustCollapse();
    });

    $(document).on('click', function (event) {
        if ($(window).width() <= 767) {
            if (!$(event.target).closest('.collapse, .collapse-item').length) {
                $('.collapse').removeClass('show');
            }
        }
    });

    // Prevent collapse from hiding on scroll
    $(window).on('scroll', function () {
        if ($(window).width() <= 767) {
            // Do nothing, allowing the collapse to remain open while scrolling
        }
    });
});

  //  $(document).ready(function () {
  //   if ($('.collapse-item.active').length > 0) {
  //     $('.collapse-item.active').closest('.collapse').addClass('show')
  //   }

  //   $('.collapse-item').click(function () {
  //     $('.collapse-item').removeClass('active')
  //     $(this).addClass('active')
  //   })

  //   var path = window.location.pathname

  //   $('.collapse-item').each(function () {
  //     var href = $(this).attr('href')
  //     if (path === href) {
  //       $(this).addClass('active')
  //       $(this).closest('.collapse').addClass('show')
  //     }
  //   })

  //   function adjustCollapse() {
  //     if ($(window).width() <= 767) {
  //       $('.collapse').removeClass('show')
  //       $('.row.d-flex.justify-content-center.align-items-center').removeClass('login-height')
  //     } else {
  //       $('.collapse-item.active').closest('.collapse').addClass('show')
  //     }
  //   }
  //   adjustCollapse()

  //   $(window).resize(function () {
  //     adjustCollapse()
  //   })

  //   $(document).on('click', function (event) {
  //     if ($(window).width() <= 767) {
  //       if (!$(event.target).closest('.collapse').length) {
  //         $('.collapse').removeClass('show')
  //       }
  //     }
  //   })
  // })

  // $(document).ready(function () {
  //   let isSidebarOpen = localStorage.getItem('isSidebarOpen') === 'true'

  //   function updateSidebarState() {
  //     $('body').toggleClass('sidebar-toggled', isSidebarOpen)
  //     $('.sidebar').toggleClass('toggled', isSidebarOpen)

  //     if (isSidebarOpen) {
  //       $('.sidebar .collapse').collapse('hide')
  //       $('#content').toggleClass('content-toggled')
  //       $('.navbar').toggleClass('navbar-toggled')
  //       $('.sticky-footer').toggleClass('footer-toggled')
  //     } else {
  //       $('#content').removeClass('content-toggled')
  //       $('.navbar').removeClass('navbar-toggled')
  //       $('.sticky-footer').removeClass('footer-toggled')
  //     }
  //   }

  //   updateSidebarState()

  //   $('#sidebarToggle, #sidebarToggleTop').on('click', function (e) {
  //     isSidebarOpen = !isSidebarOpen

  //     localStorage.setItem('isSidebarOpen', isSidebarOpen)

  //     updateSidebarState()
  //   })
  // })
  //#endregion
</script>
