<script>
    $(document).ready(function () {
        console.log('Initialize');
        let userLocation;
        let employeeid = "<%= employeeid %>";
        let devicein = '';
        let deviceout = '';
        let geofenceChecked = false; 
        let logStatusChecked = false; 
        let bdaydiv = "";
        let anouncementdiv = "";
        LoadTable();
        LoadBdayFolks();
        loadAnnouncements();

        //#region maps


        console.log('Employee ID:', employeeid);

        const OFFICE_LOCATION_LAT = 14.337945;
        const OFFICE_LOCATION_LNG = 121.060511;

        const map = L.map('map').setView([OFFICE_LOCATION_LAT, OFFICE_LOCATION_LNG], 15);

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: 'Â© OpenStreetMap contributors'
        }).addTo(map);

        const officeIcon = L.icon({
            iconUrl: './images/img/5L.png',  // Replace with the path to your office icon image
            iconSize: [32, 32],
            iconAnchor: [16, 32],
            popupAnchor: [0, -32],
        });

        const officeMarker = L.marker([OFFICE_LOCATION_LAT, OFFICE_LOCATION_LNG], { icon: officeIcon }).addTo(map);
        officeMarker.bindPopup('Office Location').openPopup();

        const geofence = L.circle([OFFICE_LOCATION_LAT, OFFICE_LOCATION_LNG], {
            color: 'red',
            fillColor: '#f03',
            fillOpacity: 0.3,
            radius: 100
        }).addTo(map);

        function checkGeofence(userLocation) {
            const userLatLng = L.latLng(userLocation.lat, userLocation.lng);
            const isInside = userLatLng.distanceTo(geofence.getLatLng()) <= geofence.getRadius();
            console.log('User is inside the geofence:', isInside);
            return isInside;
        }

        function updateLocationOnMap(position) {
            userLocation = {
                lat: position.coords.latitude,
                lng: position.coords.longitude
            };

            // Clear previous markers
            map.eachLayer((layer) => {
                if (layer instanceof L.Marker) {
                    layer.remove();
                }
            });

            const userMarker = L.marker([userLocation.lat, userLocation.lng]).addTo(map);
            userMarker.bindPopup(`My Location`).openPopup();

            const geofenceButton = document.getElementById('clockinbtn');
            if (checkGeofence(userLocation)) {
                console.log('User is inside the geofence.');
                geofenceButton.style.display = 'block';
            } else {
                console.log('User is outside the geofence.');
                geofenceButton.style.display = 'block';
            }
        }

        function handleError(error) {
            console.error(`Error getting user location: ${error.message}`, error);

            if (error.code === error.PERMISSION_DENIED) {
                notifyUserToEnableLocation();
            }
        }

        function notifyUserToEnableLocation() {
            if ('Notification' in window) {
                if (Notification.permission !== 'denied') {
                    Notification.requestPermission().then(permission => {
                        if (permission === 'granted') {
                            new Notification('Enable Location Services', {
                                body: 'Please enable location services to use this feature.',
                            });
                        }
                    });
                }
            }
        }

        const watchId = navigator.geolocation.watchPosition(
            updateLocationOnMap,
            handleError,
            {
                enableHighAccuracy: true,
                maximumAge: 30000,
                timeout: 27000
            }
        );

        function updateClockButtonStatus() {
            $.ajax({
                type: "GET",
                url: "/eportalindex/latestlog",
                data: {
                    employeeid: employeeid,
                },
                success: function (response) {
                    console.log("Latest Log API response", response);

                    if (response && response.al_logtype) {
                        const isClockIn = response.al_logtype === "ClockIn";

                        $('#clockinbtn').toggle(!isClockIn);
                        $('#clockoutbtn').toggle(isClockIn);
                    } else {
                        $('#clockinbtn').show();
                        $('#clockoutbtn').hide();
                    }
                },
                error: function (xhr, status, error) {
                    console.log("Latest Log API error", error);
                }
            });
        }

        updateClockButtonStatus();


        //#endregion


        //#region clockin/out api




        $('#clockinbtn').on('click', function () {
            getDeviceInformation()
                .then((devicein) => {
                    // Use the retrieved devicein value in your AJAX request
                    $.ajax({
                        type: "POST",
                        url: "/eportalindex/clockin",
                        data: {
                            employeeid: employeeid,
                            latitude: userLocation.lat,
                            longitude: userLocation.lng,
                            employeeid: employeeid,
                            devicein: devicein,
                        },
                        success: function (response) {
                            console.log("API response", response);

                            if (response.msg === "exist") {
                                swal({
                                    title: "Clock-in Warning",
                                    text: "You have already clocked in today.",
                                    icon: "warning",
                                });
                            } else if (response.status === "success") {
                                swal({
                                    title: "Clock-in successful!",
                                    icon: "success",
                                }).then(() => {
                                    // Handle success
                                });
                            } else {
                                swal({
                                    title: "Clock-in failed",
                                    text: response.message,
                                    icon: "error",
                                });
                            }
                        },
                        error: function (xhr, status, error) {
                            console.log("API error", error);

                            console.log("API response text:", xhr.responseText);

                            swal({
                                title: "Error",
                                text: "Unable to clock in. Please try again.",
                                icon: "error",
                            });
                        }
                    });
                })
                .catch((error) => {
                    console.error("Error getting device information:", error);
                    // Handle error getting device information
                });
        });


        $('#clockoutbtn').on('click', function () {
            if (!userLocation || typeof userLocation.lat === 'undefined' || typeof userLocation.lng === 'undefined') {
                console.error("Error: userLocation is not defined or incomplete.");
                return;
            }

            $.ajax({
                type: "POST",
                url: "/eportalindex/clockout",
                data: {
                    employeeid: employeeid,
                    latitude: userLocation.lat,
                    longitude: userLocation.lng,
                    employeeid: employeeid,
                    deviceout: deviceout,
                },

                success: function (response) {
                    console.log("API response", response);

                    if (response.msg === "success") {
                        swal({
                            title: "Clock-out successful!",
                            icon: "success",
                        }).then(() => {

                        });
                    } else if (response.msg === "exist") {
                        swal({
                            title: "Clock-out failed",
                            text: "Clock-out not allowed. Employee already clocked out on the same day.",
                            icon: "error",
                        });
                    } else {
                        swal({
                            title: "Clock-out failed",
                            text: response.message || "Unknown error",
                            icon: "error",
                        });
                    }
                },
                error: function (xhr, status, error) {
                    console.log("API error", error);
                    console.log("API response text:", xhr.responseText);

                    swal({
                        title: "Error",
                        text: "Unable to clock out. Please try again.",
                        icon: "error",
                    });
                }
            });
        });

        //#endregion


        //#region load employee dashboard


        function LoadTable() {
            $("#attendanceTable").DataTable({
                destroy: true,
                processing: true,
                serverSide: true,
                paging: false,
                searching: false,
                info: false,
                scrollY: 400,
                scrollCollapse: true,
                serverMethod: "POST",
                ajax: {
                    url: "/eportalindex/emplogs",
                    data: {
                        employeeid: employeeid,
                    },
                    dataSrc: (json) => {
                        var finalData = [];
                        var data = json.data;

                        console.log(data);
                        $.each(data, (key, item) => {

                            finalData.push({
                                logdate: item.logdate,
                                logtype: item.logtype,
                                logtime: item.logtime,
                            });
                        });

                        return finalData;
                    },
                },
                columnDefs: [
                    {
                        targets: 1,
                        className: "td-indent",
                    },
                ],
                columns: [
                    { data: "logdate" },
                    { data: "logtype" },
                    { data: "logtime" },
                ],
                createdRow: function (row, data, dataIndex) {
                    $('td', row).each(function (index) {
                        this.style.textAlign = "center";
                        this.style.verticalAlign = "middle";
                    });
                },
                initComplete: function () {
                    console.log("Done");
                },
            });
        }


        function LoadBdayFolks() {
            $.ajax({
                type: "GET",
                url: "/getbday",
                success: function (result) {
                    if (result.msg === "success") {
                        const bdayData = result.data;
                        let counterbday = 0;

                        console.log(bdayData.length);
                        $.each(bdayData, (key, item) => {
                            counterbday++;
                            bdaydiv += `
              <div class="carousel-item active" data-bs-interval="2000">
                                        <img id="preview${counterbday}" src="data:image/jpg;base64,${item.profilePicturePath}" class="d-block w-100" alt="..."
                                            style="height: 470px;">
                                        <div class="carousel-caption d-none d-md-block">
                                            <h5 id="employeeid${counterbday}">${item.firstname}</h5>
                                            <h6 id="bdaydate${counterbday}">${item.birthday}</h6>
                                        </div>
                                    </div>
                                    <button class="carousel-control-prev" type="button"
                                        data-bs-target="#carouselannouncement" data-bs-slide="prev">
                                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                        <span class="visually-hidden">Previous</span>
                                    </button>
                                    <button class="carousel-control-next" type="button"
                                        data-bs-target="#carouselannouncement" data-bs-slide="next">
                                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                        <span class="visually-hidden">Next</span>
                                    </button>`;
                        });

                    

                        $("#carouselbday").html(bdaydiv);
                    } else {
                        console.error("Error: ", result.message);
                        swal(
                            "An error occurred while fetching announcement data",
                            "Please try again later.",
                            "error"
                        );
                    }
                },
            
            });
        }


        function loadAnnouncements() {
            $.ajax({
                type: "POST",
                url: "/announcement/loadannouncements",
                dataType: "json", 
                success: function (data) {
                    if (data.msg === 'success') {
                        const carouselInner = $('#carouselannouncement .carousel-inner');

                  
                        carouselInner.empty();

 
                        $.each(data.data, function (index, announcement) {
                            const activeClass = index === 0 ? 'active' : '';

                            const carouselItem = $('<div>', {
                                class: `carousel-item ${activeClass}`
                            });

        
                            carouselItem.html(`
                        <img src="${announcement.mb_image}" class="d-block w-100" alt="Announcement Image" style="height: 470px;">
                        <div class="carousel-caption d-none d-md-block">
                            <h5>${announcement.mb_tittle}</h5>
                            <p>${announcement.mb_description}</p>
                            <p>${announcement.mb_targetdate}</p>
                        </div>
                    `);


                            carouselInner.append(carouselItem);
                        });
                    } else {
                        console.error('Error:', data.data);
                    }
                },
                error: function (error) {
                    console.error('Ajax error:', error);
                }
            });
        }

        //#region 

    });
</script>