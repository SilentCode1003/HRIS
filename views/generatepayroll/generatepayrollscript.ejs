<script>
  let startdate = '';
  let enddate = '';

  $(document).ready(function () {
    console.log('Initialize');

    $(document).on("click", "#generateButton", function () {
      let startDate = $('#datepicker').data('daterangepicker').startDate.format('YYYY-MM-DD');
      let endDate = $('#datepicker').data('daterangepicker').endDate.format('YYYY-MM-DD');

      var message = "";

      if (startDate === "") {
        message += "Start date is required. ";
      }

      if (endDate === "") {
        message += "End date is required. ";
      }

      if (message !== "") {
        swal("Validation Error", message, "error");
      } else {
        swal({
          title: "Generating and Loading Payroll",
          text: "Please wait... These Will Take a few Minutes",
          buttons: false,
          closeOnEsc: false,
          closeOnClickOutside: false,
          allowOutsideClick: false,
          content: {
            element: "div",
            attributes: {
              innerHTML: '<div class="progress"><div class="determinate" style="width: 0%"></div></div>'
            },
          },
        });

        let progress = 0;
        const interval = setInterval(function () {
          progress += 10;
          if (progress <= 100) {
            $('.progress .determinate').css('width', progress + '%');
          } else {
            clearInterval(interval);
          }
        }, 1000);

        $.ajax({
          type: "POST",
          url: "/generatepayroll/generateAndLoadPayroll",
          data: {
            startdate: startDate,
            enddate: endDate,
          },
          success: function (result) {
            console.log("Success:", result);
            clearInterval(interval);
            swal.close();

            if (result.msg == "success") {
              swal({
                title: "Generate and Load Successfully",
                text: "Thank you For Waiting ;)",
                icon: "success",
                button: "OK!",
              }).then(results => {
                loadPayrollTable(startDate, endDate); 
              });
            } else {
              swal("Error", "An error occurred while generating and loading payroll.", "error");
            }
          },
          error: function (xhr, status, error) {
            console.log("Error:", xhr.responseText);
            clearInterval(interval);
            swal.close();
            swal("Error", "An error occurred while generating and loading payroll.", "error");
          },
        });
      }
    });

    $('#datepicker').on('apply.daterangepicker', function (ev, picker) {
      $("#loadbutton").click(function () {
        let startDate = picker.startDate.format('YYYY-MM-DD');
        let endDate = picker.endDate.format('YYYY-MM-DD');
        loadPayrollTable(startDate, endDate);
      });
    });

    function loadPayrollTable(startDate, endDate) {
      swal({
        title: 'Loading Payroll',
        allowOutsideClick: false,
        onBeforeOpen: () => {
          swal.showLoading();
        }
      });

      $("#dataTablePayroll").DataTable({
        destroy: true,
        processing: true,
        serverSide: true,
        paging: false,
        searching: false,
        info: false,
        scrollY: 400,
        scrollCollapse: true,
        serverMethod: "POST",
        ajax: {
          url: "/generatepayroll/loadpayroll",
          data: {
            startdate: startDate,
            enddate: endDate,
          },
          dataSrc: (json) => {
            var finalData = [];
            var data = json.data;

            console.log(data);
            $.each(data[0], (key, item) => {
              var action = "";
              var status = item.status;

              action = `<button id="editBtn" class="btn text-primary" name="editBtn" data-bs-toggle="modal" data-bs-target="#payslipmodal"><i class="fas fa-fw fa-pen"></i></button>`;

              var imgElement = document.createElement("img");
              imgElement.src = "data:image/jpg;base64," + item.Image;
              imgElement.alt = "Profile Image";
              imgElement.style.width = "90px";
              imgElement.style.height = "90px";

              finalData.push({
                Image: imgElement.outerHTML,
                EmployeeId: item.EmployeeId,
                Salary: item.Salary,
                Payroll_Date: item.Payroll_Date,
                CutOff: item.CutOff,
                Total_AllDeductions: parseFloat(item.Total_AllDeductions) + parseFloat(item.Absent_Deductions),
                Total_Netpay: item.Total_Netpay,
                action: action,
              });
            });

            return finalData;
          },
        },
        columnDefs: [{
          targets: 1,
          className: "td-indent",
        }],
        columns: [{
          data: "Image"
        },
        {
          data: "EmployeeId"
        },
        {
          data: "Salary",
          render: function (data, type, row) {
            return '₱' + parseFloat(data).toLocaleString('en-US', {
              minimumFractionDigits: 2,
              maximumFractionDigits: 2,
            });
          }
        },
        {
          data: "Payroll_Date",
          render: function (data, type, row) {
            var originalDate = new Date(data);
            var year = originalDate.getFullYear();
            var month = (originalDate.getMonth() + 1).toString().padStart(2, '0'); 
            var day = originalDate.getDate().toString().padStart(2, '0');
            return year + "-" + month + "-" + day;
          }
        },
        {
          data: "CutOff"
        },
        {
          data: "Total_AllDeductions",
          render: function (data, type, row) {
            return '₱' + parseFloat(data).toLocaleString('en-US', {
              minimumFractionDigits: 2,
              maximumFractionDigits: 2,
            });
          }
        },
        {
          data: "Total_Netpay",
          render: function (data, type, row) {
            return '₱' + parseFloat(data).toLocaleString('en-US', {
              minimumFractionDigits: 2,
              maximumFractionDigits: 2,
            });
          }
        },
        {
          data: "action"
        },
        ],
        createdRow: function (row, data, dataIndex) {
          $("td", row).each(function (index) {
            this.style.textAlign = "center";
            this.style.verticalAlign = "middle";
          });
        },
        initComplete: function () {
          console.log('Done');
          swal.close();
        },
      });
    }
    $(function () {
      $('input[name="daterange"]').daterangepicker({
        opens: 'middle'
      }, function (start, end, label) {
        console.log("A new date selection was made: " + start.format('YYYY-MM-DD') + ' to ' + end.format('YYYY-MM-DD'));
      });
    });

  });
</script>